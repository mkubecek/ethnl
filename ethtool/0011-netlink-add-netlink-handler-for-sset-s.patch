From 1903d9532002f533dcf495252cc25f1372602147 Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Sun, 26 Nov 2017 22:45:28 +0100
Subject: [PATCH 11/34] netlink: add netlink handler for sset (-s)

Implement "ethtool -s <dev>" subcommand using netlink interface command
ETHNL_CMD_SET_SETTINGS.

Add specific parsers for wol modes and MAC address (used for wake-on-lan
password here).

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 ethtool.c          |   9 +--
 netlink/extapi.h   |   1 +
 netlink/netlink.c  |   9 +++
 netlink/netlink.h  |   1 +
 netlink/parser.c   |  36 ++++++++++
 netlink/parser.h   |   2 +
 netlink/settings.c | 171 +++++++++++++++++++++++++++++++++++++++++++++
 7 files changed, 225 insertions(+), 4 deletions(-)

diff --git a/ethtool.c b/ethtool.c
index a206ecb31981..f1064f882b99 100644
--- a/ethtool.c
+++ b/ethtool.c
@@ -5019,6 +5019,7 @@ static int show_usage(struct cmd_context *ctx);
 #define nl_gdrv		NULL
 #define nl_tsinfo	NULL
 #define nl_gset		NULL
+#define nl_sset		NULL
 #endif
 
 static const struct option {
@@ -5029,19 +5030,19 @@ static const struct option {
 	char *help;
 	char *opthelp;
 } args[] = {
-	{ "-s|--change", 1, do_sset, NULL,
+	{ "-s|--change", 1, do_sset, nl_sset,
 	  "Change generic options",
 	  "		[ speed %d ]\n"
 	  "		[ duplex half|full ]\n"
 	  "		[ port tp|aui|bnc|mii|fibre ]\n"
 	  "		[ mdix auto|on|off ]\n"
 	  "		[ autoneg on|off ]\n"
-	  "		[ advertise %x ]\n"
+	  "		[ advertise %x[/%x] | mode on|off ... [--] ]\n"
 	  "		[ phyad %d ]\n"
 	  "		[ xcvr internal|external ]\n"
-	  "		[ wol p|u|m|b|a|g|s|f|d... ]\n"
+	  "		[ wol %d[/%d] |  p|u|m|b|a|g|s|f|d...[/p|u|m|b|a|g|s|f|d...] ]\n"
 	  "		[ sopass %x:%x:%x:%x:%x:%x ]\n"
-	  "		[ msglvl %d | msglvl type on|off ... ]\n" },
+	  "		[ msglvl %d[/%d] | type on|off ... [--] ]\n" },
 	{ "-a|--show-pause", 1, do_gpause, NULL,
 	  "Show pause options" },
 	{ "-A|--pause", 1, do_spause, NULL,
diff --git a/netlink/extapi.h b/netlink/extapi.h
index 5500835372b3..4f9e60c2fca8 100644
--- a/netlink/extapi.h
+++ b/netlink/extapi.h
@@ -16,6 +16,7 @@ void netlink_done(struct cmd_context *ctx);
 int nl_gdrv(struct cmd_context *ctx);
 int nl_tsinfo(struct cmd_context *ctx);
 int nl_gset(struct cmd_context *ctx);
+int nl_sset(struct cmd_context *ctx);
 int nl_monitor(struct cmd_context *ctx);
 
 void monitor_usage();
diff --git a/netlink/netlink.c b/netlink/netlink.c
index 281fe25d94e2..09a664585e7f 100644
--- a/netlink/netlink.c
+++ b/netlink/netlink.c
@@ -776,6 +776,15 @@ static int get_ethnl_family(struct nl_context *nlctx)
 	return 0;
 }
 
+int nomsg_reply_cb(const struct nlmsghdr *nlhdr, void *data)
+{
+	const struct genlmsghdr *ghdr = (const struct genlmsghdr *)(nlhdr + 1);
+
+	fprintf(stderr, "received unexpected message: len=%u type=%u cmd=%u\n",
+	       nlhdr->nlmsg_len, nlhdr->nlmsg_type, ghdr->cmd);
+	return MNL_CB_OK;
+}
+
 /* initialization */
 
 static int nlctx_init(struct nl_context *nlctx, unsigned long debug)
diff --git a/netlink/netlink.h b/netlink/netlink.h
index 355b71feb2a7..f75edab04612 100644
--- a/netlink/netlink.h
+++ b/netlink/netlink.h
@@ -80,6 +80,7 @@ int attr_cb(const struct nlattr *attr, void *data);
 int ethnl_prep_get_request(struct cmd_context *ctx, unsigned int nlcmd,
 			   uint16_t dev_attrtype);
 int ethnl_send_get_request(struct nl_context *nlctx, mnl_cb_t cb);
+int nomsg_reply_cb(const struct nlmsghdr *nlhdr, void *data);
 int __init_aux_nlctx(struct nl_context *nlctx);
 
 /* put data wrappers */
diff --git a/netlink/parser.c b/netlink/parser.c
index ae0ddf8a2161..9811b029268a 100644
--- a/netlink/parser.c
+++ b/netlink/parser.c
@@ -832,6 +832,42 @@ err:
 	return -EINVAL;
 }
 
+/* parser handler for (6-byte) MAC address in the usual format */
+int nl_parse_mac_addr(struct nl_context *nlctx, uint16_t type, const void *data,
+		      void *dest)
+{
+	const char *arg = *nlctx->argp;
+	uint8_t val[ETH_ALEN];
+	unsigned int i;
+	const char *p;
+
+	nlctx->argp++;
+	nlctx->argc--;
+
+	p = arg;
+	i = 0;
+	while (i < ETH_ALEN && *p) {
+		char *endp;
+		unsigned long byte = strtoul(p, &endp, 16);
+
+		if ((endp - p > 2) || (*endp && *endp != ':'))
+			goto err;
+		val[i++] = (uint8_t) byte;
+		p = endp + (*endp ? 1 : 0);
+	}
+	if (i < ETH_ALEN)
+		goto err;
+
+	if (dest)
+		memcpy(dest, val, ETH_ALEN);
+	return type ? ethnla_put(nlctx, type, ETH_ALEN, val) : 0;
+
+err:
+	fprintf(stderr, "ethtool (%s): invalid value '%s' of parameter '%s'\n",
+		nlctx->cmd, arg, nlctx->param);
+	return -EINVAL;
+}
+
 static const struct param_parser *find_parser(const struct param_parser *params,
 				       const char *arg)
 {
diff --git a/netlink/parser.h b/netlink/parser.h
index c654d55d46f6..59f88145a61d 100644
--- a/netlink/parser.h
+++ b/netlink/parser.h
@@ -81,6 +81,8 @@ int nl_parse_bitlist(struct nl_context *nlctx, uint16_t type, const void *data,
 		     void *dest);
 int nl_parse_byte_str(struct nl_context *nlctx, uint16_t type,
 		      const void *data, void *dest);
+int nl_parse_mac_addr(struct nl_context *nlctx, uint16_t type,
+		      const void *data, void *dest);
 
 int nl_parser(struct nl_context *nlctx, const struct param_parser *params,
 	      void *dest);
diff --git a/netlink/settings.c b/netlink/settings.c
index 17109bc5091f..b8fdeff266f5 100644
--- a/netlink/settings.c
+++ b/netlink/settings.c
@@ -6,6 +6,7 @@
 #include "../common.h"
 #include "netlink.h"
 #include "strset.h"
+#include "parser.h"
 
 /* GET_SETTINGS */
 
@@ -390,3 +391,173 @@ int nl_gset(struct cmd_context *ctx)
 				    ETH_SETTINGS_IM_WOL);
 	return (ret < 0) ? 75 : 0;
 }
+
+/* SET_SETTINGS */
+
+enum {
+	WAKE_PHY_BIT		= 0,
+	WAKE_UCAST_BIT		= 1,
+	WAKE_MCAST_BIT		= 2,
+	WAKE_BCAST_BIT		= 3,
+	WAKE_ARP_BIT		= 4,
+	WAKE_MAGIC_BIT		= 5,
+	WAKE_MAGICSECURE_BIT	= 6,
+	WAKE_FILTER_BIT		= 7,
+};
+
+#define WAKE_ALL (WAKE_PHY | WAKE_UCAST | WAKE_MCAST | WAKE_BCAST | WAKE_ARP | \
+		  WAKE_MAGIC | WAKE_MAGICSECURE)
+
+const struct bitfield32_parser_special wol_parser_specials[] = {
+	{ 'd', 0U },
+	{}
+};
+const struct bitfield32_parser_data wol_parser_data = {
+	.bits = {
+		[WAKE_PHY_BIT]		= 'p',
+		[WAKE_UCAST_BIT]	= 'u',
+		[WAKE_MCAST_BIT]	= 'm',
+		[WAKE_BCAST_BIT]	= 'b',
+		[WAKE_ARP_BIT]		= 'a',
+		[WAKE_MAGIC_BIT]	= 'g',
+		[WAKE_MAGICSECURE_BIT]	= 's',
+		[WAKE_FILTER_BIT]	= 'f',
+	},
+	.specials = wol_parser_specials,
+};
+
+static const struct lookup_entry_u32 duplex_values[] = {
+	{ .arg = "half",	.val = DUPLEX_HALF },
+	{ .arg = "full",	.val = DUPLEX_FULL },
+	{}
+};
+
+static const struct lookup_entry_u8 port_values[] = {
+	{ .arg = "tp",		.val = PORT_TP },
+	{ .arg = "aui",		.val = PORT_AUI },
+	{ .arg = "bnc",		.val = PORT_BNC },
+	{ .arg = "mii",		.val = PORT_MII },
+	{ .arg = "fibre",	.val = PORT_FIBRE },
+	{}
+};
+
+static const struct lookup_entry_u8 mdix_values[] = {
+	{ .arg = "auto",	.val = ETH_TP_MDI_AUTO },
+	{ .arg = "on",		.val = ETH_TP_MDI_X },
+	{ .arg = "off",		.val = ETH_TP_MDI },
+	{}
+};
+
+static const struct lookup_entry_u8 autoneg_values[] = {
+	{ .arg = "off",		.val = AUTONEG_DISABLE },
+	{ .arg = "on",		.val = AUTONEG_ENABLE },
+	{}
+};
+
+static const struct param_parser sset_params[] = {
+	{
+		.arg		= "port",
+		.nest		= ETHTOOL_A_SETTINGS_LINK_INFO,
+		.type		= ETHTOOL_A_LINKINFO_PORT,
+		.handler	= nl_parse_lookup_u8,
+		.handler_data	= port_values,
+		.min_argc	= 1,
+	},
+	{
+		.arg		= "mdix",
+		.nest		= ETHTOOL_A_SETTINGS_LINK_INFO,
+		.type		= ETHTOOL_A_LINKINFO_TP_MDIX_CTRL,
+		.handler	= nl_parse_lookup_u8,
+		.handler_data	= mdix_values,
+		.min_argc	= 1,
+	},
+	{
+		.arg		= "phyad",
+		.nest		= ETHTOOL_A_SETTINGS_LINK_INFO,
+		.type		= ETHTOOL_A_LINKINFO_PHYADDR,
+		.handler	= nl_parse_direct_u8,
+		.min_argc	= 1,
+	},
+	{
+		.arg		= "autoneg",
+		.nest		= ETHTOOL_A_SETTINGS_LINK_MODES,
+		.type		= ETHTOOL_A_LINKMODES_AUTONEG,
+		.handler	= nl_parse_lookup_u8,
+		.handler_data	= autoneg_values,
+		.min_argc	= 1,
+	},
+	{
+		.arg		= "advertise",
+		.nest		= ETHTOOL_A_SETTINGS_LINK_MODES,
+		.type		= ETHTOOL_A_LINKMODES_OURS,
+		.handler	= nl_parse_bitset,
+		.min_argc	= 1,
+	},
+	{
+		.arg		= "speed",
+		.nest		= ETHTOOL_A_SETTINGS_LINK_MODES,
+		.type		= ETHTOOL_A_LINKMODES_SPEED,
+		.handler	= nl_parse_direct_u32,
+		.min_argc	= 1,
+	},
+	{
+		.arg		= "duplex",
+		.nest		= ETHTOOL_A_SETTINGS_LINK_MODES,
+		.type		= ETHTOOL_A_LINKMODES_DUPLEX,
+		.handler	= nl_parse_lookup_u8,
+		.handler_data	= duplex_values,
+		.min_argc	= 1,
+	},
+	{
+		.arg		= "wol",
+		.nest		= ETHTOOL_A_SETTINGS_WOL,
+		.type		= ETHTOOL_A_WOL_MODES,
+		.handler	= nl_parse_char_bitfield32,
+		.handler_data	= &wol_parser_data,
+		.min_argc	= 1,
+	},
+	{
+		.arg		= "sopass",
+		.nest		= ETHTOOL_A_SETTINGS_WOL,
+		.type		= ETHTOOL_A_WOL_SOPASS,
+		.handler	= nl_parse_mac_addr,
+		.min_argc	= 1,
+	},
+	{
+		.arg		= "msglvl",
+		.nest		= ETHTOOL_A_SETTINGS_DEBUG,
+		.type		= ETHTOOL_A_DEBUG_MSG_MASK,
+		.handler	= nl_parse_bitfield32,
+		.handler_data	= flags_msglvl,
+		.min_argc	= 1,
+	},
+	{}
+};
+
+int nl_sset(struct cmd_context *ctx)
+{
+	struct nl_context *nlctx = ctx->nlctx;
+	int ret;
+
+	nlctx->cmd = "-s";
+	nlctx->argp = ctx->argp;
+	nlctx->argc = ctx->argc;
+	ret = msg_init(nlctx, ETHNL_CMD_SET_SETTINGS,
+		       NLM_F_REQUEST | NLM_F_ACK);
+	if (ret < 0)
+		return 2;
+	if (ethnla_put_dev(nlctx, ETHTOOL_A_SETTINGS_DEV, ctx->devname))
+		return -EMSGSIZE;
+
+	ret = nl_parser(nlctx, sset_params, NULL);
+	if (ret < 0)
+		return 2;
+
+	ret = ethnl_sendmsg(nlctx);
+	if (ret < 0)
+		return 75;
+	ret = ethnl_process_reply(nlctx, nomsg_reply_cb);
+	if (ret == 0)
+		return 0;
+	return nlctx->exit_code ?: 75;
+}
-- 
2.21.0

