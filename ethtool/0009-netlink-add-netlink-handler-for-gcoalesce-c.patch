From 0c483ccdd4a9cb4324a0904411ab0df62bc1cdd4 Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Fri, 8 Dec 2017 23:54:51 +0100
Subject: [PATCH 09/20] netlink: add netlink handler for gcoalesce (-c)

Implement "ethtool -c <dev>" subcommand using netlink interface command
ETHTOOL_CMD_GET_PARAMS with ETH_PARAMS_IM_COALESCE mask.

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 ethtool.c |   3 +-
 netlink.c | 101 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 netlink.h |   1 +
 3 files changed, 104 insertions(+), 1 deletion(-)

diff --git a/ethtool.c b/ethtool.c
index 483144d24c81..a0dbe5955333 100644
--- a/ethtool.c
+++ b/ethtool.c
@@ -4919,6 +4919,7 @@ static int show_usage(struct cmd_context *ctx);
 int nl_gdrv(struct cmd_context *ctx) { return 0; }
 int nl_gset(struct cmd_context *ctx) { return 0; }
 int nl_sset(struct cmd_context *ctx) { return 0; }
+int nl_gcoalesce(struct cmd_context *ctx) { return 0; }
 #endif
 
 static const struct option {
@@ -4949,7 +4950,7 @@ static const struct option {
 	  "		[ autoneg on|off ]\n"
 	  "		[ rx on|off ]\n"
 	  "		[ tx on|off ]\n" },
-	{ "-c|--show-coalesce", 1, do_gcoalesce, NULL,
+	{ "-c|--show-coalesce", 1, do_gcoalesce, nl_gcoalesce,
 	  "Show coalesce options" },
 	{ "-C|--coalesce", 1, do_scoalesce, NULL,
 	  "Set coalesce options",
diff --git a/netlink.c b/netlink.c
index e2b89c8b7d8f..527acfbdb029 100644
--- a/netlink.c
+++ b/netlink.c
@@ -1752,6 +1752,98 @@ int nl_sset(struct cmd_context *ctx)
 	return nlctx->exit_code ?: 75;
 }
 
+/* GET_PARAMS */
+
+static int show_coalesce(struct nl_context *nlctx, const struct nlattr *nest)
+{
+	const struct nlattr *tb[ETHA_COALESCE_MAX + 1] = {};
+	DECLARE_ATTR_TB_INFO(tb);
+	int ret;
+
+	if (!nest)
+		return -EOPNOTSUPP;
+	ret = mnl_attr_parse_nested(nest, attr_cb, &tb_info);
+	if (ret < 0)
+		return ret;
+
+	printf("Coalesce parameters for %s:\n", nlctx->devname);
+	printf("Adaptive RX: %s  TX: %s\n",
+	       u8_to_bool(tb[ETHA_COALESCE_RX_USE_ADAPTIVE]),
+	       u8_to_bool(tb[ETHA_COALESCE_TX_USE_ADAPTIVE]));
+	show_u32(tb[ETHA_COALESCE_STATS_BLOCK_USECS], "stats-block-usecs: ");
+	show_u32(tb[ETHA_COALESCE_RATE_SAMPLE_INTERVAL], "sample-interval: ");
+	show_u32(tb[ETHA_COALESCE_PKT_RATE_LOW], "pkt-rate-low: ");
+	show_u32(tb[ETHA_COALESCE_PKT_RATE_HIGH], "pkt-rate-high: ");
+	putchar('\n');
+	show_u32(tb[ETHA_COALESCE_RX_USECS], "rx-usecs: ");
+	show_u32(tb[ETHA_COALESCE_RX_MAXFRM], "rx-frames: ");
+	show_u32(tb[ETHA_COALESCE_RX_USECS_IRQ], "rx-usecs-irq: ");
+	show_u32(tb[ETHA_COALESCE_RX_MAXFRM_IRQ], "rx-frames-irq: ");
+	putchar('\n');
+	show_u32(tb[ETHA_COALESCE_TX_USECS], "tx-usecs: ");
+	show_u32(tb[ETHA_COALESCE_TX_MAXFRM], "tx-frames: ");
+	show_u32(tb[ETHA_COALESCE_TX_USECS_IRQ], "tx-usecs-irq: ");
+	show_u32(tb[ETHA_COALESCE_TX_MAXFRM_IRQ], "tx-frames-irq: ");
+	putchar('\n');
+	show_u32(tb[ETHA_COALESCE_RX_USECS_LOW], "rx-usecs-low: ");
+	show_u32(tb[ETHA_COALESCE_RX_MAXFRM_LOW], "rx-frame-low: ");
+	show_u32(tb[ETHA_COALESCE_TX_USECS_LOW], "tx-usecs-low: ");
+	show_u32(tb[ETHA_COALESCE_TX_MAXFRM_LOW], "tx-frame-low: ");
+	putchar('\n');
+	show_u32(tb[ETHA_COALESCE_RX_USECS_HIGH], "rx-usecs-high: ");
+	show_u32(tb[ETHA_COALESCE_RX_MAXFRM_HIGH], "rx-frame-high: ");
+	show_u32(tb[ETHA_COALESCE_TX_USECS_HIGH], "tx-usecs-high: ");
+	show_u32(tb[ETHA_COALESCE_TX_MAXFRM_HIGH], "tx-frame-high: ");
+	putchar('\n');
+
+	return 0;
+}
+
+static int get_params_reply_cb(const struct nlmsghdr *nlhdr, void *data)
+{
+	const struct nlattr *tb[ETHA_PARAMS_MAX + 1] = {};
+	DECLARE_ATTR_TB_INFO(tb);
+	struct nl_context *nlctx = data;
+	int ret;
+
+	ret = mnl_attr_parse(nlhdr, GENL_HDRLEN, attr_cb, &tb_info);
+	if (ret < 0)
+		return ret;
+	nlctx->devname = get_dev_name(tb[ETHA_PARAMS_DEV]);
+	if (!dev_ok(nlctx))
+		return MNL_CB_OK;
+
+	if (mask_ok(nlctx, ETH_PARAMS_IM_COALESCE)) {
+		ret = show_coalesce(nlctx, tb[ETHA_PARAMS_COALESCE]);
+		if ((ret < 0) && show_only(nlctx, ETH_PARAMS_IM_COALESCE)) {
+			nlctx->exit_code = 82;
+			errno = -ret;
+			perror("Cannot get device coalesce settings");
+			return MNL_CB_ERROR;
+		}
+	}
+
+	return MNL_CB_OK;
+}
+
+static int params_request(struct cmd_context *ctx, uint16_t info_mask)
+{
+	int ret;
+
+	ret = ethnl_prep_get_request(ctx, ETHNL_CMD_GET_PARAMS,
+				     ETHA_PARAMS_DEV);
+	if (ret < 0)
+		return ret;
+	if (ethnla_put_u32(ctx->nlctx, ETHA_PARAMS_INFOMASK, info_mask))
+		return -EMSGSIZE;
+	return ethnl_send_get_request(ctx, get_params_reply_cb);
+}
+
+int nl_gcoalesce(struct cmd_context *ctx)
+{
+	return params_request(ctx, ETH_PARAMS_IM_COALESCE);
+}
+
 /* monitor */
 
 static struct {
@@ -1766,6 +1858,10 @@ static struct {
 		.cmd	= ETHNL_CMD_SET_SETTINGS,
 		.cb	= settings_reply_cb,
 	},
+	{
+		.cmd	= ETHNL_CMD_SET_PARAMS,
+		.cb	= params_reply_cb,
+	},
 };
 
 static int monitor_any_cb(const struct nlmsghdr *nlhdr, void *data)
@@ -1803,6 +1899,11 @@ static struct monitor_option monitor_opts[] = {
 		.pattern	= "|-s|--change",
 		.cmd		= ETHNL_CMD_SET_SETTINGS,
 	},
+	{
+		.pattern	= "-c|--show-coalesce|-C|--coalesce",
+		.cmd		= ETHNL_CMD_SET_PARAMS,
+		.info_mask	= ETH_PARAMS_IM_COALESCE,
+	},
 };
 
 static bool pattern_match(const char *s, const char *pattern)
diff --git a/netlink.h b/netlink.h
index 2e721e5279ad..20d0d05b24fe 100644
--- a/netlink.h
+++ b/netlink.h
@@ -10,6 +10,7 @@ int netlink_done(struct cmd_context *ctx);
 int nl_gdrv(struct cmd_context *ctx);
 int nl_gset(struct cmd_context *ctx);
 int nl_sset(struct cmd_context *ctx);
+int nl_gcoalesce(struct cmd_context *ctx);
 int nl_monitor(struct cmd_context *ctx);
 
 void monitor_usage();
-- 
2.18.0

