From 574f8baa51c0f665f453427e1ca7e4d50a825c13 Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Thu, 26 Mar 2020 22:17:10 +0100
Subject: [PATCH 18/18] netlink: add netlink handler for tsinfo (-T)

Implement "ethtool -T <dev>" subcommand using ETHTOOL_MSG_TIMESTAMP_GET
netlink message. This retrieves and displays device timestamping
information, traditionally provided by ETHTOOL_GET_TS_INFO ioctl request.

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 Makefile.am         |   2 +-
 ethtool.c           |   1 +
 netlink/extapi.h    |   2 +
 netlink/timestamp.c | 117 ++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 121 insertions(+), 1 deletion(-)
 create mode 100644 netlink/timestamp.c

diff --git a/Makefile.am b/Makefile.am
index 78548ef1f7eb..c1185fdb7ef2 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -33,7 +33,7 @@ ethtool_SOURCES += \
 		  netlink/permaddr.c netlink/prettymsg.c netlink/prettymsg.h \
 		  netlink/features.c netlink/privflags.c netlink/rings.c \
 		  netlink/channels.c netlink/coalesce.c netlink/pause.c \
-		  netlink/eee.c \
+		  netlink/eee.c netlink/timestamp.c \
 		  netlink/desc-ethtool.c netlink/desc-genlctrl.c \
 		  netlink/desc-rtnl.c \
 		  uapi/linux/ethtool_netlink.h \
diff --git a/ethtool.c b/ethtool.c
index 7edadcd64ea3..408772e1df71 100644
--- a/ethtool.c
+++ b/ethtool.c
@@ -5308,6 +5308,7 @@ static const struct option args[] = {
 	{
 		.opts	= "-T|--show-time-stamping",
 		.func	= do_tsinfo,
+		.nlfunc	= nl_tsinfo,
 		.help	= "Show time stamping capabilities"
 	},
 	{
diff --git a/netlink/extapi.h b/netlink/extapi.h
index 0b2a7e5a3e5c..bb547da20d86 100644
--- a/netlink/extapi.h
+++ b/netlink/extapi.h
@@ -32,6 +32,7 @@ int nl_gpause(struct cmd_context *ctx);
 int nl_spause(struct cmd_context *ctx);
 int nl_geee(struct cmd_context *ctx);
 int nl_seee(struct cmd_context *ctx);
+int nl_tsinfo(struct cmd_context *ctx);
 int nl_monitor(struct cmd_context *ctx);
 
 void nl_monitor_usage(void);
@@ -68,6 +69,7 @@ static inline void nl_monitor_usage(void)
 #define nl_spause		NULL
 #define nl_geee			NULL
 #define nl_seee			NULL
+#define nl_tsinfo		NULL
 
 #endif /* ETHTOOL_ENABLE_NETLINK */
 
diff --git a/netlink/timestamp.c b/netlink/timestamp.c
new file mode 100644
index 000000000000..d943ab22d247
--- /dev/null
+++ b/netlink/timestamp.c
@@ -0,0 +1,117 @@
+/*
+ * timestamp.c - netlink implementation of timestamp commands
+ *
+ * Implementation of "ethtool -T <dev>"
+ */
+
+#include <errno.h>
+#include <string.h>
+#include <stdio.h>
+
+#include "../internal.h"
+#include "../common.h"
+#include "netlink.h"
+#include "bitset.h"
+
+/* TIMESTAMP_GET */
+
+static void timestamp_dump_cb(unsigned int idx, const char *name, bool val,
+			      void *data)
+{
+	if (!val)
+		return;
+
+	if (name)
+		printf("\t%s\n", name);
+	else
+		printf("\tbit%u\n", idx);
+}
+
+static int timestamp_dump_list(struct nl_context *nlctx,
+			       const struct nlattr *attr, const char *label,
+			       const char *if_empty,
+			       unsigned int stringset_id)
+{
+	const struct stringset *strings = NULL;
+	int ret;
+
+	printf("%s:", label);
+	ret = 0;
+	if (!attr || bitset_is_empty(attr, false, &ret)) {
+		printf("%s\n", if_empty);
+		return ret;
+	}
+	putchar('\n');
+	if (ret < 0)
+		return ret;
+
+	if (bitset_is_compact(attr)) {
+		ret = netlink_init_ethnl2_socket(nlctx);
+		if (ret < 0)
+			return ret;
+		strings = global_stringset(stringset_id, nlctx->ethnl2_socket);
+	}
+	return walk_bitset(attr, strings, timestamp_dump_cb, NULL);
+}
+
+int timestamp_reply_cb(const struct nlmsghdr *nlhdr, void *data)
+{
+	const struct nlattr *tb[ETHTOOL_A_TIMESTAMP_MAX + 1] = {};
+	DECLARE_ATTR_TB_INFO(tb);
+	struct nl_context *nlctx = data;
+	bool silent;
+	int err_ret;
+	int ret;
+
+	silent = nlctx->is_dump;
+	err_ret = silent ? MNL_CB_OK : MNL_CB_ERROR;
+	ret = mnl_attr_parse(nlhdr, GENL_HDRLEN, attr_cb, &tb_info);
+	if (ret < 0)
+		return err_ret;
+	nlctx->devname = get_dev_name(tb[ETHTOOL_A_TIMESTAMP_HEADER]);
+	if (!dev_ok(nlctx))
+		return err_ret;
+
+	if (silent)
+		putchar('\n');
+	printf("Time stamping parameters for %s:\n", nlctx->devname);
+
+	ret = timestamp_dump_list(nlctx, tb[ETHTOOL_A_TIMESTAMP_TIMESTAMPING],
+				  "Capabilities", "", ETH_SS_SOF_TIMESTAMPING);
+	if (ret < 0)
+		return err_ret;
+
+	printf("PTP Hardware Clock: ");
+	if (tb[ETHTOOL_A_TIMESTAMP_PHC_INDEX])
+		printf("%d\n",
+		       mnl_attr_get_u32(tb[ETHTOOL_A_TIMESTAMP_PHC_INDEX]));
+	else
+		printf("none\n");
+
+	ret = timestamp_dump_list(nlctx, tb[ETHTOOL_A_TIMESTAMP_TX_TYPES],
+				  "Hardware Transmit Timestamp Modes", " none",
+				  ETH_SS_TS_TX_TYPES);
+	if (ret < 0)
+		return err_ret;
+
+	ret = timestamp_dump_list(nlctx, tb[ETHTOOL_A_TIMESTAMP_RX_FILTERS],
+				  "Hardware Receive Filter Modes", " none",
+				  ETH_SS_TS_RX_FILTERS);
+	if (ret < 0)
+		return err_ret;
+
+	return MNL_CB_OK;
+}
+
+int nl_tsinfo(struct cmd_context *ctx)
+{
+	struct nl_context *nlctx = ctx->nlctx;
+	struct nl_socket *nlsk = nlctx->ethnl_socket;
+	int ret;
+
+	ret = nlsock_prep_get_request(nlsk, ETHTOOL_MSG_TIMESTAMP_GET,
+				      ETHTOOL_A_TIMESTAMP_HEADER, 0);
+	if (ret < 0)
+		return ret;
+	return nlsock_send_get_request(nlsk, timestamp_reply_cb);
+}
-- 
2.25.1

