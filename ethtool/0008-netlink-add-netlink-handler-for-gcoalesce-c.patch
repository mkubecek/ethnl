From 180d7681f2ef0a4dff3e94b49e289c85fd2462ad Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Fri, 8 Dec 2017 23:54:51 +0100
Subject: [PATCH 08/19] netlink: add netlink handler for gcoalesce (-c)

Implement "ethtool -c <dev>" subcommand using netlink interface command
ETHTOOL_CMD_GET_PARAMS with ETH_PARAMS_IM_COALESCE mask.

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 ethtool.c |  3 ++-
 netlink.c | 80 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 netlink.h |  1 +
 3 files changed, 83 insertions(+), 1 deletion(-)

diff --git a/ethtool.c b/ethtool.c
index 20ce04c265d2..329384cf5636 100644
--- a/ethtool.c
+++ b/ethtool.c
@@ -4909,6 +4909,7 @@ static int show_usage(struct cmd_context *ctx);
 int nl_gdrv(struct cmd_context *ctx) { return 0; }
 int nl_gset(struct cmd_context *ctx) { return 0; }
 int nl_sset(struct cmd_context *ctx) { return 0; }
+int nl_gcoalesce(struct cmd_context *ctx) { return 0; }
 #endif
 
 static const struct option {
@@ -4939,7 +4940,7 @@ static const struct option {
 	  "		[ autoneg on|off ]\n"
 	  "		[ rx on|off ]\n"
 	  "		[ tx on|off ]\n" },
-	{ "-c|--show-coalesce", 1, do_gcoalesce, NULL,
+	{ "-c|--show-coalesce", 1, do_gcoalesce, nl_gcoalesce,
 	  "Show coalesce options" },
 	{ "-C|--coalesce", 1, do_scoalesce, NULL,
 	  "Set coalesce options",
diff --git a/netlink.c b/netlink.c
index bdb0d7c51a01..856a0ced9ea2 100644
--- a/netlink.c
+++ b/netlink.c
@@ -1630,3 +1630,83 @@ int nl_sset(struct cmd_context *ctx)
 	perror("netlink error");
 	return nlctx->exit_code ?: 75;
 }
+
+/* GET_PARAMS */
+
+static int show_coalesce(struct nl_context *nlctx, const struct nlattr *nest)
+{
+	const struct nlattr *tb[ETHA_COALESCE_MAX + 1] = {};
+	DECLARE_ATTR_TB_INFO(tb);
+	int ret;
+
+	if (!nest)
+		return -EOPNOTSUPP;
+	ret = mnl_attr_parse_nested(nest, attr_cb, &tb_info);
+	if (ret < 0)
+		return ret;
+
+	printf("Coalesce parameters for %s:\n", nlctx->enlhdr->ifname);
+	printf("Adaptive RX: %s  TX: %s\n",
+	       u8_to_bool(tb[ETHA_COALESCE_RX_USE_ADAPTIVE]),
+	       u8_to_bool(tb[ETHA_COALESCE_TX_USE_ADAPTIVE]));
+	show_u32(tb[ETHA_COALESCE_STATS_BLOCK_USECS], "stats-block-usecs: ");
+	show_u32(tb[ETHA_COALESCE_RATE_SAMPLE_INTERVAL], "sample-interval: ");
+	show_u32(tb[ETHA_COALESCE_PKT_RATE_LOW], "pkt-rate-low: ");
+	show_u32(tb[ETHA_COALESCE_PKT_RATE_HIGH], "pkt-rate-high: ");
+	putchar('\n');
+	show_u32(tb[ETHA_COALESCE_RX_USECS], "rx-usecs: ");
+	show_u32(tb[ETHA_COALESCE_RX_MAXFRM], "rx-frames: ");
+	show_u32(tb[ETHA_COALESCE_RX_USECS_IRQ], "rx-usecs-irq: ");
+	show_u32(tb[ETHA_COALESCE_RX_MAXFRM_IRQ], "rx-frames-irq: ");
+	putchar('\n');
+	show_u32(tb[ETHA_COALESCE_TX_USECS], "tx-usecs: ");
+	show_u32(tb[ETHA_COALESCE_TX_MAXFRM], "tx-frames: ");
+	show_u32(tb[ETHA_COALESCE_TX_USECS_IRQ], "tx-usecs-irq: ");
+	show_u32(tb[ETHA_COALESCE_TX_MAXFRM_IRQ], "tx-frames-irq: ");
+	putchar('\n');
+	show_u32(tb[ETHA_COALESCE_RX_USECS_LOW], "rx-usecs-low: ");
+	show_u32(tb[ETHA_COALESCE_RX_MAXFRM_LOW], "rx-frame-low: ");
+	show_u32(tb[ETHA_COALESCE_TX_USECS_LOW], "tx-usecs-low: ");
+	show_u32(tb[ETHA_COALESCE_TX_MAXFRM_LOW], "tx-frame-low: ");
+	putchar('\n');
+	show_u32(tb[ETHA_COALESCE_RX_USECS_HIGH], "rx-usecs-high: ");
+	show_u32(tb[ETHA_COALESCE_RX_MAXFRM_HIGH], "rx-frame-high: ");
+	show_u32(tb[ETHA_COALESCE_TX_USECS_HIGH], "tx-usecs-high: ");
+	show_u32(tb[ETHA_COALESCE_TX_MAXFRM_HIGH], "tx-frame-high: ");
+	putchar('\n');
+
+	return 0;
+}
+
+static int get_params_reply_cb(const struct nlmsghdr *nlhdr, void *data)
+{
+	const struct nlattr *tb[ETHA_PARAMS_MAX + 1] = {};
+	DECLARE_ATTR_TB_INFO(tb);
+	struct nl_context *nlctx = data;
+	u16 req_mask = nlctx->enlhdr->info_mask ?: ETH_PARAMS_IM_DEFAULT;
+	int ret;
+
+	ret = mnl_attr_parse(nlhdr, GENL_HDRLEN + ETHNL_HDRLEN, attr_cb,
+			     &tb_info);
+	if (ret < 0)
+		return ret;
+
+	if (!req_mask || req_mask & ETH_PARAMS_IM_COALESCE) {
+		ret = show_coalesce(nlctx, tb[ETHA_PARAMS_COALESCE]);
+		if ((ret < 0) && !(req_mask & ~ETH_PARAMS_IM_COALESCE)) {
+			nlctx->exit_code = 82;
+			errno = -ret;
+			perror("Cannot get device coalesce settings");
+			return MNL_CB_ERROR;
+		}
+	}
+
+	return MNL_CB_OK;
+}
+
+int nl_gcoalesce(struct cmd_context *ctx)
+{
+	return ethnl_std_get_request(ctx, ETHNL_CMD_GET_PARAMS,
+				     get_params_reply_cb,
+				     ETH_PARAMS_IM_COALESCE, 0);
+}
diff --git a/netlink.h b/netlink.h
index 7c071474c9cd..dbb1161ea48d 100644
--- a/netlink.h
+++ b/netlink.h
@@ -10,5 +10,6 @@ int netlink_done(struct cmd_context *ctx);
 int nl_gdrv(struct cmd_context *ctx);
 int nl_gset(struct cmd_context *ctx);
 int nl_sset(struct cmd_context *ctx);
+int nl_gcoalesce(struct cmd_context *ctx);
 
 #endif /* ETHTOOL_NETLINK_H__ */
-- 
2.16.3

