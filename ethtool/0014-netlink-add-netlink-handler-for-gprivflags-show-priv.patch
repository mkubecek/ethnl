From cb442f8048b0229bb556fec1cddc0f55e9f310e5 Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Fri, 7 Sep 2018 14:20:18 +0200
Subject: [PATCH 14/34] netlink: add netlink handler for gprivflags
 (--show-priv-flags)

Implement "ethtool --show-priv-flags <dev>" subcommand using netlink
interface command ETHNL_CMD_GET_SETTINGS with ETHTOOL_IM_SETTINGS_PRIVFLAGS
mask. Also support corresponding notification in monitor.

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 ethtool.c          |  3 ++-
 netlink/extapi.h   |  1 +
 netlink/monitor.c  |  5 ++++
 netlink/settings.c | 64 +++++++++++++++++++++++++++++++++++++++++++++-
 4 files changed, 71 insertions(+), 2 deletions(-)

diff --git a/ethtool.c b/ethtool.c
index 3df59831aa41..2f23f7e6931d 100644
--- a/ethtool.c
+++ b/ethtool.c
@@ -4983,6 +4983,7 @@ static int show_usage(struct cmd_context *ctx);
 #define nl_sset		NULL
 #define nl_gfeatures	NULL
 #define nl_sfeatures	NULL
+#define nl_gprivflags	NULL
 #endif
 
 static const struct option {
@@ -5142,7 +5143,7 @@ static const struct option {
 	  "               [ tx N ]\n"
 	  "               [ other N ]\n"
 	  "               [ combined N ]\n" },
-	{ "--show-priv-flags", 1, do_gprivflags, NULL,
+	{ "--show-priv-flags", 1, do_gprivflags, nl_gprivflags,
 	  "Query private flags" },
 	{ "--set-priv-flags", 1, do_sprivflags, NULL,
 	  "Set private flags",
diff --git a/netlink/extapi.h b/netlink/extapi.h
index d0199cb440f8..ce5fde1ddc35 100644
--- a/netlink/extapi.h
+++ b/netlink/extapi.h
@@ -19,6 +19,7 @@ int nl_gset(struct cmd_context *ctx);
 int nl_sset(struct cmd_context *ctx);
 int nl_gfeatures(struct cmd_context *ctx);
 int nl_sfeatures(struct cmd_context *ctx);
+int nl_gprivflags(struct cmd_context *ctx);
 int nl_monitor(struct cmd_context *ctx);
 
 void monitor_usage();
diff --git a/netlink/monitor.c b/netlink/monitor.c
index aa37315df6f6..b738b506554e 100644
--- a/netlink/monitor.c
+++ b/netlink/monitor.c
@@ -67,6 +67,11 @@ static struct monitor_option monitor_opts[] = {
 		.cmd		= ETHNL_CMD_SET_SETTINGS,
 		.info_mask	= ETHTOOL_IM_SETTINGS_FEATURES,
 	},
+	{
+		.pattern	= "--show-priv-flags|--set-priv-flags",
+		.cmd		= ETHNL_CMD_SET_SETTINGS,
+		.info_mask	= ETHTOOL_IM_SETTINGS_PRIVFLAGS,
+	},
 };
 
 static bool pattern_match(const char *s, const char *pattern)
diff --git a/netlink/settings.c b/netlink/settings.c
index 585a10eb4589..ee9a45cb4879 100644
--- a/netlink/settings.c
+++ b/netlink/settings.c
@@ -519,6 +519,53 @@ out_free:
 	return 0;
 }
 
+void priv_flags_strlen_walk_cb(unsigned int idx, const char *name, bool val,
+			       void *data)
+{
+	unsigned int *maxlen = data;
+	unsigned int len;
+
+	if (name)
+		len = strlen(name);
+	else {
+		len = 3; /* strlen("bit") */
+		for (idx = idx ?: 1; idx; idx /= 10)
+			len++; /* plus number of ditigs */
+	}
+	if (len > *maxlen)
+		*maxlen = len;
+}
+
+void dump_priv_flags_walk_cb(unsigned int idx, const char *name, bool val,
+			      void *data)
+{
+	unsigned int *maxlen = data;
+	char buff[16];
+
+	if (!name) {
+		snprintf(buff, sizeof(buff) - 1, "bit%u", idx);
+		name = buff;
+	}
+	printf("%-*s: %s\n", *maxlen, name, val ? "on" : "off");
+}
+
+int dump_priv_flags(struct nl_context *nlctx, const struct nlattr *bitset)
+{
+	const struct stringset *labels;
+	unsigned int maxlen = 0;
+	int ret;
+
+	labels = perdev_stringset(nlctx->devname, ETH_SS_PRIV_FLAGS);
+	ret = walk_bitset(bitset, labels, priv_flags_strlen_walk_cb, &maxlen);
+	if (ret < 0)
+		return ret;
+
+	if (nlctx->is_monitor || nlctx->is_dump)
+		putchar('\n');
+	printf("Private flags for %s:\n", nlctx->devname);
+	return walk_bitset(bitset, labels, dump_priv_flags_walk_cb, &maxlen);
+}
+
 int settings_reply_cb(const struct nlmsghdr *nlhdr, void *data)
 {
 	const struct nlattr *tb[ETHTOOL_A_SETTINGS_MAX + 1] = {};
@@ -578,6 +625,13 @@ int settings_reply_cb(const struct nlmsghdr *nlhdr, void *data)
 		if (ret == 0)
 			allfail = false;
 	}
+	if (tb[ETHTOOL_A_SETTINGS_PRIV_FLAGS] &&
+	    mask_ok(nlctx, ETHTOOL_IM_SETTINGS_PRIVFLAGS)) {
+		ret = dump_priv_flags(nlctx,
+				      tb[ETHTOOL_A_SETTINGS_PRIV_FLAGS]);
+		if (ret == 0)
+			allfail = false;
+	}
 
 	if (allfail && !nlctx->is_monitor && !nlctx->is_dump) {
 		fputs("No data available\n", stdout);
@@ -589,12 +643,15 @@ int settings_reply_cb(const struct nlmsghdr *nlhdr, void *data)
 
 int settings_request(struct cmd_context *ctx, uint32_t info_mask)
 {
+	bool is_dev = ctx->devname && strcmp(ctx->devname, WILDCARD_DEVNAME);
 	bool compact = info_mask & ETHTOOL_IM_SETTINGS_FEATURES;
 	struct nl_context *nlctx = ctx->nlctx;
 	int ret;
 
-	if (compact)
+	if (compact) {
 		load_global_strings(nlctx);
+		load_perdev_strings(nlctx, is_dev ? ctx->devname : NULL);
+	}
 
 	ret = ethnl_prep_get_request(ctx, ETHNL_CMD_GET_SETTINGS,
 				     ETHTOOL_A_SETTINGS_DEV);
@@ -623,6 +680,11 @@ int nl_gfeatures(struct cmd_context *ctx)
 	return settings_request(ctx, ETHTOOL_IM_SETTINGS_FEATURES);
 }
 
+int nl_gprivflags(struct cmd_context *ctx)
+{
+	return settings_request(ctx, ETHTOOL_IM_SETTINGS_PRIVFLAGS);
+}
+
 /* SET_SETTINGS */
 
 enum {
-- 
2.21.0

