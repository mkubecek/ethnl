From 3f9b42571f0cfdba752fc7a2cbd26560e308239d Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Sun, 19 Nov 2017 21:10:58 +0100
Subject: [PATCH 07/34] netlink: add netlink handler for gdrv (-i)

Implement "-i" subcommand using netlink interface command
ETHNL_CMD_GET_INFO.

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 Makefile.am       |   1 +
 ethtool.c         |   3 +-
 netlink/extapi.h  |   1 +
 netlink/info.c    | 168 ++++++++++++++++++++++++++++++++++++++++++++++
 netlink/monitor.c |  10 +++
 5 files changed, 182 insertions(+), 1 deletion(-)
 create mode 100644 netlink/info.c

diff --git a/Makefile.am b/Makefile.am
index c620cbdf0981..42ea94138543 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -23,6 +23,7 @@ if ETHTOOL_ENABLE_NETLINK
 ethtool_SOURCES += \
 		  netlink/netlink.c netlink/netlink.h netlink/extapi.h \
 		  netlink/strset.c netlink/strset.h netlink/monitor.c \
+		  netlink/info.c \
 		  uapi/linux/ethtool_netlink.h \
 		  uapi/linux/netlink.h uapi/linux/genetlink.h
 ethtool_CFLAGS += @MNL_CFLAGS@
diff --git a/ethtool.c b/ethtool.c
index 89d5c850fff3..63fd99bdff08 100644
--- a/ethtool.c
+++ b/ethtool.c
@@ -5143,6 +5143,7 @@ static int show_usage(struct cmd_context *ctx);
 /* Just define all netlink handlers as null when building without netlink
  * support so that we do not get unresolved symbols in args array below
  */
+#define nl_gdrv		NULL
 #endif
 
 static const struct option {
@@ -5212,7 +5213,7 @@ static const struct option {
 	{ "-K|--features|--offload", 1, do_sfeatures, NULL,
 	  "Set protocol offload and other features",
 	  "		FEATURE on|off ...\n" },
-	{ "-i|--driver", 1, do_gdrv, NULL,
+	{ "-i|--driver", 1, do_gdrv, nl_gdrv,
 	  "Show driver information" },
 	{ "-d|--register-dump", 1, do_gregs, NULL,
 	  "Do a register dump",
diff --git a/netlink/extapi.h b/netlink/extapi.h
index c6a65e3222cd..2612f1752b56 100644
--- a/netlink/extapi.h
+++ b/netlink/extapi.h
@@ -13,6 +13,7 @@ struct nl_context;
 int netlink_init(struct cmd_context *ctx);
 void netlink_done(struct cmd_context *ctx);
 
+int nl_gdrv(struct cmd_context *ctx);
 int nl_monitor(struct cmd_context *ctx);
 
 void monitor_usage();
diff --git a/netlink/info.c b/netlink/info.c
new file mode 100644
index 000000000000..c4d0c9c9f5e8
--- /dev/null
+++ b/netlink/info.c
@@ -0,0 +1,168 @@
+#include <errno.h>
+
+#include "../internal.h"
+#include "netlink.h"
+
+static const uint32_t drvinfo_strsets[] = {
+	ETH_SS_STATS,
+	ETH_SS_TEST,
+	ETH_SS_PRIV_FLAGS,
+};
+
+static int strcounts_reply_cb(const struct nlmsghdr *nlhdr, void *data)
+{
+	struct nl_context *nlctx = data;
+	uint32_t *drvinfo_features = nlctx->cmd_private;
+	const struct nlattr *attr;
+	int ret;
+
+	mnl_attr_for_each(attr, nlhdr, GENL_HDRLEN) {
+		const struct nlattr *tb[ETHA_STRINGSET_MAX + 1] = {};
+		DECLARE_ATTR_TB_INFO(tb);
+		uint32_t count;
+		uint32_t id;
+
+		if (mnl_attr_get_type(attr) != ETHA_STRSET_STRINGSET)
+			continue;
+		ret = mnl_attr_parse_nested(attr, attr_cb, &tb_info);
+		if (ret < 0)
+			continue;
+		if (!tb[ETHA_STRINGSET_ID] || !tb[ETHA_STRINGSET_COUNT])
+			continue;
+
+		id = mnl_attr_get_u32(tb[ETHA_STRINGSET_ID]);
+		count = mnl_attr_get_u32(tb[ETHA_STRINGSET_COUNT]);
+		if (id >= 32)
+			continue;
+		if (count > 0)
+			*drvinfo_features |= (1U << id);
+	}
+
+	return MNL_CB_OK;
+}
+
+static int put_strset_id(struct nl_context *nlctx, uint32_t id)
+{
+	struct nlattr *nest;
+
+	nest = ethnla_nest_start(nlctx, ETHA_STRSET_STRINGSET);
+	if (!nest)
+		return -EMSGSIZE;
+	if (ethnla_put_u32(nlctx, ETHA_STRINGSET_ID, id)) {
+		mnl_attr_nest_cancel(nlctx->nlhdr, nest);
+		return -EMSGSIZE;
+	}
+	mnl_attr_nest_end(nlctx->nlhdr, nest);
+
+	return 0;
+}
+
+static int show_drvinfo_features(struct nl_context *nlctx)
+{
+	uint32_t drvinfo_features = 0;
+	int ret;
+	int i;
+
+	ret = msg_init(nlctx, ETHNL_CMD_GET_STRSET, NLM_F_REQUEST | NLM_F_ACK);
+	if (ret < 0)
+		return ret;
+	if (ethnla_put_dev(nlctx, ETHA_STRSET_DEV, nlctx->devname) ||
+	    ethnla_put_flag(nlctx, ETHA_STRSET_COUNTS, true))
+		return -EMSGSIZE;
+
+	for (i = 0; i < ARRAY_SIZE(drvinfo_strsets); i++) {
+		ret = put_strset_id(nlctx, drvinfo_strsets[i]);
+		if (ret < 0)
+			return ret;
+	}
+
+	nlctx->cmd_private = &drvinfo_features;
+	ret = ethnl_send_get_request(nlctx, strcounts_reply_cb);
+	if (ret < 0)
+		goto out;
+
+	printf("supports-statistics: %s\n",
+	       drvinfo_features & (1U << ETH_SS_STATS) ? "yes" : "no");
+	printf("supports-test: %s\n",
+	       drvinfo_features & (1U << ETH_SS_TEST) ? "yes" : "no");
+	printf("supports-priv-flags: %s\n",
+	       drvinfo_features & (1U << ETH_SS_PRIV_FLAGS) ? "yes" : "no");
+out:
+	nlctx->cmd_private = NULL;
+	return ret;
+}
+
+static int show_drvinfo(struct nl_context *nlctx, const struct nlattr *nest)
+{
+	const struct nlattr *tb[ETHA_DRVINFO_MAX + 1] = {};
+	DECLARE_ATTR_TB_INFO(tb);
+	int ret;
+
+	if (!nest)
+		return -EOPNOTSUPP;
+	ret = mnl_attr_parse_nested(nest, attr_cb, &tb_info);
+	if (ret < 0)
+		return ret;
+
+	if (nlctx->is_dump || nlctx->is_monitor)
+		printf("\nDriver info for %s:\n", nlctx->devname);
+	show_string(tb, ETHA_DRVINFO_DRIVER, "driver");
+	show_string(tb, ETHA_DRVINFO_FWVERSION, "firmware-version");
+	show_string(tb, ETHA_DRVINFO_EROM_VER, "expansion-rom-version");
+	show_string(tb, ETHA_DRVINFO_BUSINFO, "bus-info");
+
+	nlctx->aux_nlctx->devname = nlctx->devname;
+	show_drvinfo_features(nlctx->aux_nlctx);
+
+	return MNL_CB_OK;
+}
+
+int info_reply_cb(const struct nlmsghdr *nlhdr, void *data)
+{
+	const struct nlattr *tb[ETHA_INFO_MAX + 1] = {};
+	DECLARE_ATTR_TB_INFO(tb);
+	struct nl_context *nlctx = data;
+	int ret;
+
+	ret = mnl_attr_parse(nlhdr, GENL_HDRLEN, attr_cb, &tb_info);
+	if (ret < 0)
+		return ret;
+	nlctx->devname = get_dev_name(tb[ETHA_INFO_DEV]);
+	if (!dev_ok(nlctx))
+		return MNL_CB_OK;
+
+	if (mask_ok(nlctx, ETH_INFO_IM_DRVINFO)) {
+		ret = show_drvinfo(nlctx, tb[ETHA_INFO_DRVINFO]);
+		if ((ret < 0) && show_only(nlctx, ETH_INFO_IM_DRVINFO)) {
+			nlctx->exit_code = 1;
+			errno = -ret;
+			perror("Cannot get device driver info");
+			return MNL_CB_ERROR;
+		}
+	}
+
+	return MNL_CB_OK;
+}
+
+static int info_request(struct cmd_context *ctx, uint32_t info_mask)
+{
+	int ret;
+
+	if (info_mask & ETH_INFO_IM_DRVINFO) {
+		ret = init_aux_nlctx(ctx->nlctx);
+		if (ret < 0)
+			return ret;
+	}
+
+	ret = ethnl_prep_get_request(ctx, ETHNL_CMD_GET_INFO, ETHA_INFO_DEV);
+	if (ret < 0)
+		return ret;
+	if (ethnla_put_u32(ctx->nlctx, ETHA_INFO_INFOMASK, info_mask))
+		return -EMSGSIZE;
+	return ethnl_send_get_request(ctx->nlctx, info_reply_cb);
+}
+
+int nl_gdrv(struct cmd_context *ctx)
+{
+	return info_request(ctx, ETH_INFO_IM_DRVINFO);
+}
diff --git a/netlink/monitor.c b/netlink/monitor.c
index d02c0ac5339c..e8ad2f59a7c0 100644
--- a/netlink/monitor.c
+++ b/netlink/monitor.c
@@ -94,6 +94,8 @@ static int monitor_event_cb(const struct nlmsghdr *nlhdr, void *data)
 	return MNL_CB_OK;
 }
 
+int info_reply_cb(const struct nlmsghdr *nlhdr, void *data);
+
 static struct {
 	uint8_t		cmd;
 	mnl_cb_t	cb;
@@ -102,6 +104,10 @@ static struct {
 		.cmd	= ETHNL_CMD_EVENT,
 		.cb	= monitor_event_cb,
 	},
+	{
+		.cmd	= ETHNL_CMD_SET_INFO,
+		.cb	= info_reply_cb,
+	},
 };
 
 static int monitor_any_cb(const struct nlmsghdr *nlhdr, void *data)
@@ -131,6 +137,10 @@ static struct monitor_option monitor_opts[] = {
 		.pattern	= "|--all",
 		.cmd		= 0,
 	},
+	{
+		.pattern	= "-i|--driver",
+		.cmd		= ETHNL_CMD_SET_INFO,
+	},
 };
 
 static bool pattern_match(const char *s, const char *pattern)
-- 
2.21.0

