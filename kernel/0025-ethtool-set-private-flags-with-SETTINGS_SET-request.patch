From 1a1b0498a974450aaa29b4fd8fd5908a87b63306 Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Fri, 7 Sep 2018 13:23:31 +0200
Subject: [PATCH 25/45] ethtool: set private flags with SETTINGS_SET request

Add support for setting device private flags using ETHTOOL_MSG_SETTINGS_SET
message. ETHTOOL_A_SETTINGS_PRIV_FLAGS nested attribute is a bit set used
to define either requested set of enabled flags or changes against current
state.

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 Documentation/networking/ethtool-netlink.txt |  3 +-
 net/ethtool/settings.c                       | 45 +++++++++++++++++++-
 2 files changed, 46 insertions(+), 2 deletions(-)

diff --git a/Documentation/networking/ethtool-netlink.txt b/Documentation/networking/ethtool-netlink.txt
index 856ebf919b2a..e9cb218877bd 100644
--- a/Documentation/networking/ethtool-netlink.txt
+++ b/Documentation/networking/ethtool-netlink.txt
@@ -347,6 +347,7 @@ to be passed with SETTINGS_SET request:
         ETHTOOL_A_DEBUG_MSG_MASK	    (bitfield32)    message mask
     ETHTOOL_A_SETTINGS_FEATURES		(nested)	device features
         ETHTOOL_A_FEATURES_WANTED	    (bitset)	    wanted features
+    ETHTOOL_A_SETTINGS_PRIV_FLAGS	(bitset)	device private flags
 
 ETHTOOL_A_LINKMODES_OURS bit set allows setting advertised link modes. If
 autonegotiation is on (either set now or kept from before), advertised modes
@@ -429,7 +430,7 @@ ETHTOOL_SGSO			ETHTOOL_MSG_SETTINGS_SET
 ETHTOOL_GFLAGS			ETHTOOL_MSG_SETTINGS_GET
 ETHTOOL_SFLAGS			ETHTOOL_MSG_SETTINGS_SET
 ETHTOOL_GPFLAGS			ETHTOOL_MSG_SETTINGS_GET
-ETHTOOL_SPFLAGS			n/a
+ETHTOOL_SPFLAGS			ETHTOOL_MSG_SETTINGS_SET
 ETHTOOL_GRXFH			n/a
 ETHTOOL_SRXFH			n/a
 ETHTOOL_GGRO			ETHTOOL_MSG_SETTINGS_GET
diff --git a/net/ethtool/settings.c b/net/ethtool/settings.c
index a5a0ba0ce7cf..f8d57b54203f 100644
--- a/net/ethtool/settings.c
+++ b/net/ethtool/settings.c
@@ -780,7 +780,7 @@ settings_set_policy[ETHTOOL_A_SETTINGS_MAX + 1] = {
 	[ETHTOOL_A_SETTINGS_WOL]		= { .type = NLA_NESTED },
 	[ETHTOOL_A_SETTINGS_DEBUG]		= { .type = NLA_NESTED },
 	[ETHTOOL_A_SETTINGS_FEATURES]		= { .type = NLA_NESTED },
-	[ETHTOOL_A_SETTINGS_PRIV_FLAGS]		= { .type = NLA_REJECT },
+	[ETHTOOL_A_SETTINGS_PRIV_FLAGS]		= { .type = NLA_NESTED },
 };
 
 static int ethnl_set_link_ksettings(struct genl_info *info,
@@ -1144,6 +1144,41 @@ static int settings_update_features(struct genl_info *info,
 	return !!mod;
 }
 
+static int settings_update_priv_flags(struct genl_info *info,
+				      struct net_device *dev,
+				      const struct nlattr *bitset)
+{
+	const struct ethtool_ops *ops = dev->ethtool_ops;
+	unsigned int nflags;
+	void *names = NULL;
+	bool mod = false;
+	bool compact;
+	u32 flags;
+	int ret;
+
+	if (!ops->get_priv_flags || !ops->set_priv_flags)
+		return -EOPNOTSUPP;
+	ret = ethnl_bitset_is_compact(bitset, &compact);
+	if (ret < 0)
+		return ret;
+	ret = ethnl_get_priv_flags_info(dev, &nflags, compact ? NULL : &names);
+	if (ret < 0)
+		return ret;
+	flags = ops->get_priv_flags(dev);
+
+	ret = ethnl_update_bitset32(&flags, nflags, bitset, names, true,
+				    info->extack, &mod);
+	if (ret < 0 || !mod)
+		goto out_free;
+	ret = ops->set_priv_flags(dev, flags);
+	ret = ret ?: 1;
+
+out_free:
+	if (!compact)
+		kfree(names);
+	return ret;
+}
+
 int ethnl_set_settings(struct sk_buff *skb, struct genl_info *info)
 {
 	struct nlattr *tb[ETHTOOL_A_SETTINGS_MAX + 1];
@@ -1202,6 +1237,14 @@ int ethnl_set_settings(struct sk_buff *skb, struct genl_info *info)
 		if (ret)
 			req_mask |= ETHTOOL_IM_SETTINGS_FEATURES;
 	}
+	if (tb[ETHTOOL_A_SETTINGS_PRIV_FLAGS]) {
+		ret = settings_update_priv_flags(info, dev,
+						 tb[ETHTOOL_A_SETTINGS_PRIV_FLAGS]);
+		if (ret < 0)
+			goto out_ops;
+		if (ret)
+			req_mask |= ETHTOOL_IM_SETTINGS_PRIVFLAGS;
+	}
 	ret = 0;
 
 out_ops:
-- 
2.22.0

