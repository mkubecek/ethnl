From 2df182824bf2a2cbf8086e38fe4cdd8c02427d4f Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Mon, 11 Mar 2019 08:30:12 +0100
Subject: [PATCH 33/44] ethtool: provide channel counts in PARAMS_GET request

Add information about channel counts (as provided by ETHTOOL_GCHANNELS
ioctl command) in PARAMS_GET reply when ETHTOOL_IM_PARAMS_CHANNELS flag is
set in the request.

Send notification in the same format as reply when channel counts are
modified using the ioctl interface (ETHTOOL_SCHANNELS command).

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 Documentation/networking/ethtool-netlink.txt | 19 +++++--
 include/uapi/linux/ethtool_netlink.h         | 21 +++++++-
 net/ethtool/ioctl.c                          |  7 ++-
 net/ethtool/params.c                         | 55 ++++++++++++++++++++
 4 files changed, 96 insertions(+), 6 deletions(-)

diff --git a/Documentation/networking/ethtool-netlink.txt b/Documentation/networking/ethtool-netlink.txt
index a617dbedde38..f2b2f36b6aa0 100644
--- a/Documentation/networking/ethtool-netlink.txt
+++ b/Documentation/networking/ethtool-netlink.txt
@@ -435,9 +435,10 @@ PARAMS_GET
 ----------
 
 PARAMS_GET request retrieves information provided by ioctl comands
-ETHTOOL_GCOALESCE (coalescing parameters), ETHTOOL_GRINGPARAM (ring sizes) and
-ETHTOOL_GPAUSEPARAM (pause parameters). For each of these, there is a bit in
-header info_mask so that only one type of information can be requested.
+ETHTOOL_GCOALESCE (coalescing parameters), ETHTOOL_GRINGPARAM (ring sizes),
+ETHTOOL_GPAUSEPARAM (pause parameters) and ETHTOOL_GCHANNELS (channel counts).
+For each of these, there is a bit in header info_mask so that only one type of
+information can be requested.
 
 Request contents:
 
@@ -448,6 +449,7 @@ Info mask bits:
     ETHTOOL_IM_PARAMS_COALESCE		coalescing parameters
     ETHTOOL_IM_PARAMS_RING		ring sizes
     ETHTOOL_IM_PARAMS_PAUSE		pause parameters
+    ETHTOOL_IM_PARAMS_CHANNELS		channel counts
 
 Response contents: On top level, there is one attribute for each of the
 information categories, the information is nested in it.
@@ -489,6 +491,15 @@ information categories, the information is nested in it.
         ETHTOOL_A_PAUSE_AUTONEG		    (bool)
         ETHTOOL_A_PAUSE_RX		    (bool)
         ETHTOOL_A_PAUSE_TX		    (bool)
+    ETHTOOL_A_PARAMS_CHANNELS		(nested)	channel counts
+        ETHTOOL_A_CHANNELS_MAX_RX	    (u32)
+        ETHTOOL_A_CHANNELS_MAX_TX	    (u32)
+        ETHTOOL_A_CHANNELS_MAX_OTHER	    (u32)
+        ETHTOOL_A_CHANNELS_MAX_COMBINED	    (u32)
+        ETHTOOL_A_CHANNELS_RX_COUNT	    (u32)
+        ETHTOOL_A_CHANNELS_TX_COUNT	    (u32)
+        ETHTOOL_A_CHANNELS_OTHER_COUNT	    (u32)
+        ETHTOOL_A_CHANNELS_COMBINED_COUNT   (u32)
 
 PARAMS_GET requests allow dumps and messages in the same format as response
 to them are broadcasted as notifications on change of these settings using
@@ -606,7 +617,7 @@ ETHTOOL_GRXFHINDIR		n/a
 ETHTOOL_SRXFHINDIR		n/a
 ETHTOOL_GFEATURES		ETHTOOL_MSG_SETTINGS_GET
 ETHTOOL_SFEATURES		ETHTOOL_MSG_SETTINGS_SET
-ETHTOOL_GCHANNELS		n/a
+ETHTOOL_GCHANNELS		ETHTOOL_MSG_PARAMS_GET
 ETHTOOL_SCHANNELS		n/a
 ETHTOOL_SET_DUMP		n/a
 ETHTOOL_GET_DUMP_FLAG		n/a
diff --git a/include/uapi/linux/ethtool_netlink.h b/include/uapi/linux/ethtool_netlink.h
index a77f5d0fcb67..c58a4582c667 100644
--- a/include/uapi/linux/ethtool_netlink.h
+++ b/include/uapi/linux/ethtool_netlink.h
@@ -313,6 +313,7 @@ enum {
 	ETHTOOL_A_PARAMS_COALESCE,		/* nest - _A_COALESCE_* */
 	ETHTOOL_A_PARAMS_RING,			/* nest - _A_RING_* */
 	ETHTOOL_A_PARAMS_PAUSE,			/* nest - _A_PAUSE_* */
+	ETHTOOL_A_PARAMS_CHANNELS,		/* nest - _A_CHANNELS_* */
 
 	/* add new constants above here */
 	__ETHTOOL_A_PARAMS_CNT,
@@ -322,10 +323,12 @@ enum {
 #define ETHTOOL_IM_PARAMS_COALESCE		(1U << 0)
 #define ETHTOOL_IM_PARAMS_RING			(1U << 1)
 #define ETHTOOL_IM_PARAMS_PAUSE			(1U << 2)
+#define ETHTOOL_IM_PARAMS_CHANNELS		(1U << 3)
 
 #define ETHTOOL_IM_PARAMS_ALL (ETHTOOL_IM_PARAMS_COALESCE | \
 			       ETHTOOL_IM_PARAMS_RING | \
-			       ETHTOOL_IM_PARAMS_PAUSE)
+			       ETHTOOL_IM_PARAMS_PAUSE | \
+			       ETHTOOL_IM_PARAMS_CHANNELS)
 
 #define ETHTOOL_RF_PARAMS_ALL 0
 
@@ -386,6 +389,22 @@ enum {
 	ETHTOOL_A_PAUSE_MAX = (__ETHTOOL_A_PAUSE_CNT - 1)
 };
 
+enum {
+	ETHTOOL_A_CHANNELS_UNSPEC,
+	ETHTOOL_A_CHANNELS_MAX_RX,		/* u32 */
+	ETHTOOL_A_CHANNELS_MAX_TX,		/* u32 */
+	ETHTOOL_A_CHANNELS_MAX_OTHER,		/* u32 */
+	ETHTOOL_A_CHANNELS_MAX_COMBINED,	/* u32 */
+	ETHTOOL_A_CHANNELS_RX_COUNT,		/* u32 */
+	ETHTOOL_A_CHANNELS_TX_COUNT,		/* u32 */
+	ETHTOOL_A_CHANNELS_OTHER_COUNT,		/* u32 */
+	ETHTOOL_A_CHANNELS_COMBINED_COUNT,	/* u32 */
+
+	/* add new constants above here */
+	__ETHTOOL_A_CHANNELS_CNT,
+	ETHTOOL_A_CHANNELS_MAX = (__ETHTOOL_A_CHANNELS_CNT - 1)
+};
+
 /* generic netlink info */
 #define ETHTOOL_GENL_NAME "ethtool"
 #define ETHTOOL_GENL_VERSION 1
diff --git a/net/ethtool/ioctl.c b/net/ethtool/ioctl.c
index 7727768929ac..e726c8eb5582 100644
--- a/net/ethtool/ioctl.c
+++ b/net/ethtool/ioctl.c
@@ -1538,6 +1538,7 @@ static noinline_for_stack int ethtool_set_channels(struct net_device *dev,
 	u16 from_channel, to_channel;
 	u32 max_rx_in_use = 0;
 	unsigned int i;
+	int ret;
 
 	if (!dev->ethtool_ops->set_channels || !dev->ethtool_ops->get_channels)
 		return -EOPNOTSUPP;
@@ -1569,7 +1570,11 @@ static noinline_for_stack int ethtool_set_channels(struct net_device *dev,
 		if (xdp_get_umem_from_qid(dev, i))
 			return -EINVAL;
 
-	return dev->ethtool_ops->set_channels(dev, &channels);
+	ret = dev->ethtool_ops->set_channels(dev, &channels);
+	if (ret == 0)
+		ethtool_notify(dev, NULL, ETHTOOL_MSG_PARAMS_NTF,
+			       ETHTOOL_IM_PARAMS_CHANNELS, NULL);
+	return ret;
 }
 
 static int ethtool_get_pauseparam(struct net_device *dev, void __user *useraddr)
diff --git a/net/ethtool/params.c b/net/ethtool/params.c
index fda1e03e8226..14e3823014ad 100644
--- a/net/ethtool/params.c
+++ b/net/ethtool/params.c
@@ -8,6 +8,7 @@ static const struct nla_policy params_get_policy[ETHTOOL_A_PARAMS_MAX + 1] = {
 	[ETHTOOL_A_PARAMS_COALESCE]		= { .type = NLA_REJECT },
 	[ETHTOOL_A_PARAMS_RING]			= { .type = NLA_REJECT },
 	[ETHTOOL_A_PARAMS_PAUSE]		= { .type = NLA_REJECT },
+	[ETHTOOL_A_PARAMS_CHANNELS]		= { .type = NLA_REJECT },
 };
 
 struct params_data {
@@ -18,6 +19,7 @@ struct params_data {
 	struct ethtool_coalesce		coalesce;
 	struct ethtool_ringparam	ring;
 	struct ethtool_pauseparam	pause;
+	struct ethtool_channels		channels;
 };
 
 static int ethnl_get_coalesce(struct net_device *dev,
@@ -46,6 +48,15 @@ static int ethnl_get_pause(struct net_device *dev,
 	return 0;
 }
 
+static int ethnl_get_channels(struct net_device *dev,
+			      struct ethtool_channels *data)
+{
+	if (!dev->ethtool_ops->get_channels)
+		return -EOPNOTSUPP;
+	dev->ethtool_ops->get_channels(dev, data);
+	return 0;
+}
+
 static int params_prepare(struct ethnl_req_info *req_info,
 			  struct genl_info *info)
 {
@@ -73,6 +84,11 @@ static int params_prepare(struct ethnl_req_info *req_info,
 		if (ret < 0)
 			req_mask &= ~ETHTOOL_IM_PARAMS_PAUSE;
 	}
+	if (req_mask & ETHTOOL_IM_PARAMS_CHANNELS) {
+		ret = ethnl_get_channels(dev, &data->channels);
+		if (ret < 0)
+			req_mask &= ~ETHTOOL_IM_PARAMS_CHANNELS;
+	}
 	ethnl_after_ops(dev);
 
 	data->repdata_base.info_mask = req_mask;
@@ -98,6 +114,11 @@ static int params_pause_size(void)
 	return nla_total_size(3 * nla_total_size(sizeof(u8)));
 }
 
+static int params_channels_size(void)
+{
+	return nla_total_size(8 * nla_total_size(sizeof(u32)));
+}
+
 static int params_size(const struct ethnl_req_info *req_info)
 {
 	struct params_data *data =
@@ -112,6 +133,8 @@ static int params_size(const struct ethnl_req_info *req_info)
 		len += params_ring_size();
 	if (info_mask & ETHTOOL_IM_PARAMS_PAUSE)
 		len += params_pause_size();
+	if (info_mask & ETHTOOL_IM_PARAMS_CHANNELS)
+		len += params_channels_size();
 
 	return len;
 }
@@ -226,6 +249,32 @@ static int params_fill_pause(struct sk_buff *skb,
 	return 0;
 }
 
+static int params_fill_channels(struct sk_buff *skb,
+				struct ethtool_channels *data)
+{
+	struct nlattr *nest;
+
+	nest = nla_nest_start(skb, ETHTOOL_A_PARAMS_CHANNELS);
+	if (!nest)
+		return -EMSGSIZE;
+	if (nla_put_u32(skb, ETHTOOL_A_CHANNELS_MAX_RX, data->max_rx) ||
+	    nla_put_u32(skb, ETHTOOL_A_CHANNELS_MAX_TX, data->max_tx) ||
+	    nla_put_u32(skb, ETHTOOL_A_CHANNELS_MAX_OTHER, data->max_other) ||
+	    nla_put_u32(skb, ETHTOOL_A_CHANNELS_MAX_COMBINED,
+			data->max_combined) ||
+	    nla_put_u32(skb, ETHTOOL_A_CHANNELS_RX_COUNT, data->rx_count) ||
+	    nla_put_u32(skb, ETHTOOL_A_CHANNELS_TX_COUNT, data->tx_count) ||
+	    nla_put_u32(skb, ETHTOOL_A_CHANNELS_OTHER_COUNT,
+			data->other_count) ||
+	    nla_put_u32(skb, ETHTOOL_A_CHANNELS_COMBINED_COUNT,
+			data->combined_count)) {
+		return -EMSGSIZE;
+	}
+
+	nla_nest_end(skb, nest);
+	return 0;
+}
+
 static int params_fill(struct sk_buff *skb,
 		       const struct ethnl_req_info *req_info)
 {
@@ -249,6 +298,11 @@ static int params_fill(struct sk_buff *skb,
 		if (ret < 0)
 			return ret;
 	}
+	if (info_mask & ETHTOOL_IM_PARAMS_CHANNELS) {
+		ret = params_fill_channels(skb, &data->channels);
+		if (ret < 0)
+			return ret;
+	}
 
 	return 0;
 }
@@ -277,6 +331,7 @@ static const struct nla_policy params_set_policy[ETHTOOL_A_PARAMS_MAX + 1] = {
 	[ETHTOOL_A_PARAMS_COALESCE]		= { .type = NLA_NESTED },
 	[ETHTOOL_A_PARAMS_RING]			= { .type = NLA_NESTED },
 	[ETHTOOL_A_PARAMS_PAUSE]		= { .type = NLA_NESTED },
+	[ETHTOOL_A_PARAMS_CHANNELS]		= { .type = NLA_REJECT },
 };
 
 static const struct nla_policy params_hdr_policy[ETHTOOL_A_HEADER_MAX + 1] = {
-- 
2.22.0

