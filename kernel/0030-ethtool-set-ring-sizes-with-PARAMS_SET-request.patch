From 7e85982ad505ef56d005b2841c1e6cbaa0e5e408 Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Mon, 11 Mar 2019 07:53:54 +0100
Subject: [PATCH 30/44] ethtool: set ring sizes with PARAMS_SET request

Add support for setting device ring sizes using SET_SETTINGS request with
ETHTOOL_A_PARAMS_RING nested attribute. This is a replacement of
ETHTOOL_SRINGPARAM ioctl command.

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 Documentation/networking/ethtool-netlink.txt | 13 +++-
 net/ethtool/params.c                         | 82 +++++++++++++++++++-
 2 files changed, 91 insertions(+), 4 deletions(-)

diff --git a/Documentation/networking/ethtool-netlink.txt b/Documentation/networking/ethtool-netlink.txt
index 73c78182bc7b..835723706a7d 100644
--- a/Documentation/networking/ethtool-netlink.txt
+++ b/Documentation/networking/ethtool-netlink.txt
@@ -494,8 +494,10 @@ PARAMS_SET
 ----------
 
 PARAMS_SET request modifies the settings retrieved by PARAMS_GET, i.e. it
-replaces ETHTOOL_SCOALESCE ioctl commands. Relevant data attributes are
-contained in nest attribute ETHTOOL_A_PARAMS_COALESCE.
+replaces ETHTOOL_SCOALESCE and ETHTOOL_SRINGPARAM ioctl commands. For each of
+these, relevant data attributes are contained in a corresponding nest
+attribute. Some of the attributes provided by PARAMS_GET are read only and
+cannot be set by PARAMS_SET request.
 
     ETHTOOL_A_PARAMS_HEADER		(nested)	request header
     ETHTOOL_A_PARAMS_COALESCE		(nested)	coalescing parameters
@@ -521,6 +523,11 @@ contained in nest attribute ETHTOOL_A_PARAMS_COALESCE.
         ETHTOOL_A_COALESCE_TX_USE_ADAPTIVE  (bool)
         ETHTOOL_A_COALESCE_RATE_SAMPLE_INTERVAL	(u32)
         ETHTOOL_A_COALESCE_STATS_BLOCK_USECS	(u32)
+    ETHTOOL_A_PARAMS_RING		(nested)	ring sizes
+        ETHTOOL_A_RING_RX_PENDING	    (u32)
+        ETHTOOL_A_RING_RX_MINI_PENDING	    (u32)
+        ETHTOOL_A_RING_RX_JUMBO_PENDING	    (u32)
+        ETHTOOL_A_RING_TX_PENDING	    (u32)
 
 
 Request translation
@@ -547,7 +554,7 @@ ETHTOOL_SEEPROM			n/a
 ETHTOOL_GCOALESCE		ETHTOOL_MSG_PARAMS_GET
 ETHTOOL_SCOALESCE		ETHTOOL_MSG_PARAMS_SET
 ETHTOOL_GRINGPARAM		ETHTOOL_MSG_PARAMS_GET
-ETHTOOL_SRINGPARAM		n/a
+ETHTOOL_SRINGPARAM		ETHTOOL_MSG_PARAMS_SET
 ETHTOOL_GPAUSEPARAM		n/a
 ETHTOOL_SPAUSEPARAM		n/a
 ETHTOOL_GRXCSUM			ETHTOOL_MSG_SETTINGS_GET
diff --git a/net/ethtool/params.c b/net/ethtool/params.c
index 6744c03ded1b..17e3a8ff3e94 100644
--- a/net/ethtool/params.c
+++ b/net/ethtool/params.c
@@ -227,7 +227,7 @@ static const struct nla_policy params_set_policy[ETHTOOL_A_PARAMS_MAX + 1] = {
 	[ETHTOOL_A_PARAMS_UNSPEC]		= { .type = NLA_REJECT },
 	[ETHTOOL_A_PARAMS_HEADER]		= { .type = NLA_NESTED },
 	[ETHTOOL_A_PARAMS_COALESCE]		= { .type = NLA_NESTED },
-	[ETHTOOL_A_PARAMS_RING]			= { .type = NLA_REJECT },
+	[ETHTOOL_A_PARAMS_RING]			= { .type = NLA_NESTED },
 };
 
 static const struct nla_policy params_hdr_policy[ETHTOOL_A_HEADER_MAX + 1] = {
@@ -368,6 +368,81 @@ static int params_update_coalesce(struct genl_info *info,
 	return (ret < 0) ? ret : 1;
 }
 
+static const struct nla_policy ring_policy[ETHTOOL_A_RING_MAX + 1] = {
+	[ETHTOOL_A_RING_UNSPEC]			= { .type = NLA_REJECT },
+	[ETHTOOL_A_RING_RX_MAX_PENDING]		= { .type = NLA_REJECT },
+	[ETHTOOL_A_RING_RX_MINI_MAX_PENDING]	= { .type = NLA_REJECT },
+	[ETHTOOL_A_RING_RX_JUMBO_MAX_PENDING]	= { .type = NLA_REJECT },
+	[ETHTOOL_A_RING_TX_MAX_PENDING]		= { .type = NLA_REJECT },
+	[ETHTOOL_A_RING_RX_PENDING]		= { .type = NLA_U32 },
+	[ETHTOOL_A_RING_RX_MINI_PENDING]	= { .type = NLA_U32 },
+	[ETHTOOL_A_RING_RX_JUMBO_PENDING]	= { .type = NLA_U32 },
+	[ETHTOOL_A_RING_TX_PENDING]		= { .type = NLA_U32 },
+};
+
+/**
+ * params_update_ring() - update ring parameters from nested attribute
+ * @info: genl_info pointer (only needed for extack)
+ * @dev:  device to set ring parameters for
+ * @nest: ETHTOOL_A_PARAMS_RING nested attribute
+ *
+ * Return: negative code on error, 0 if no change, >0 if there was a change
+ */
+static int params_update_ring(struct genl_info *info, struct net_device *dev,
+			      struct nlattr *nest)
+{
+	struct nlattr *tb[ETHTOOL_A_RING_MAX + 1];
+	struct ethtool_ringparam data = {};
+	const struct nlattr *err_attr;
+	bool mod = false;
+	int ret;
+
+	if (!nest)
+		return 0;
+	if (!dev->ethtool_ops->get_ringparam ||
+	    !dev->ethtool_ops->set_ringparam)
+		return -EOPNOTSUPP;
+	dev->ethtool_ops->get_ringparam(dev, &data);
+
+	ret = nla_parse_nested(tb, ETHTOOL_A_RING_MAX, nest, ring_policy,
+			       info->extack);
+	if (ret < 0)
+		return ret;
+
+	if (ethnl_update_u32(&data.rx_pending, tb[ETHTOOL_A_RING_RX_PENDING]))
+		mod = true;
+	if (ethnl_update_u32(&data.rx_mini_pending,
+			     tb[ETHTOOL_A_RING_RX_MINI_PENDING]))
+		mod = true;
+	if (ethnl_update_u32(&data.rx_jumbo_pending,
+			     tb[ETHTOOL_A_RING_RX_JUMBO_PENDING]))
+		mod = true;
+	if (ethnl_update_u32(&data.tx_pending, tb[ETHTOOL_A_RING_TX_PENDING]))
+		mod = true;
+	if (!mod)
+		return 0;
+
+	/* ensure new ring parameters are within the maximums */
+	if (data.rx_pending > data.rx_max_pending)
+		err_attr = tb[ETHTOOL_A_RING_RX_PENDING];
+	else if (data.rx_mini_pending > data.rx_mini_max_pending)
+		err_attr = tb[ETHTOOL_A_RING_RX_MINI_PENDING];
+	else if (data.rx_jumbo_pending > data.rx_jumbo_max_pending)
+		err_attr = tb[ETHTOOL_A_RING_RX_JUMBO_PENDING];
+	else if (data.tx_pending > data.tx_max_pending)
+		err_attr = tb[ETHTOOL_A_RING_TX_PENDING];
+	else
+		err_attr = NULL;
+	if (err_attr) {
+		NL_SET_ERR_MSG_ATTR(info->extack, err_attr,
+				    "requested ring size exceeeds maximum");
+		return -EINVAL;
+	}
+
+	ret = dev->ethtool_ops->set_ringparam(dev, &data);
+	return (ret < 0) ? ret : 1;
+}
+
 int ethnl_set_params(struct sk_buff *skb, struct genl_info *info)
 {
 	struct nlattr *tb[ETHTOOL_A_PARAMS_MAX + 1];
@@ -396,6 +471,11 @@ int ethnl_set_params(struct sk_buff *skb, struct genl_info *info)
 		goto out_ops;
 	if (ret)
 		req_mask |= ETHTOOL_IM_PARAMS_COALESCE;
+	ret = params_update_ring(info, dev, tb[ETHTOOL_A_PARAMS_RING]);
+	if (ret < 0)
+		goto out_ops;
+	if (ret)
+		req_mask |= ETHTOOL_IM_PARAMS_RING;
 
 	ret = 0;
 out_ops:
-- 
2.22.0

