From 282e03692d8ef420f15cb6a6a1c25b9dd2c7f566 Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Mon, 11 Mar 2019 08:02:27 +0100
Subject: [PATCH 31/44] ethtool: provide pause parameters in PARAMS_GET request

Add information about pause parameters (as provided by ETHTOOL_GPAUSEPARAM
ioctl command) in PARAMS_GET reply when ETHTOOL_IM_PARAMS_PAUSE flag is set
in the request.

Send notification in the same format as reply when pause parameters are
modified using the ioctl interface (ETHTOOL_SPAUSEPARAM command).

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 Documentation/networking/ethtool-netlink.txt | 13 ++++--
 include/uapi/linux/ethtool_netlink.h         | 16 ++++++-
 net/ethtool/ioctl.c                          |  7 ++-
 net/ethtool/params.c                         | 48 ++++++++++++++++++++
 4 files changed, 78 insertions(+), 6 deletions(-)

diff --git a/Documentation/networking/ethtool-netlink.txt b/Documentation/networking/ethtool-netlink.txt
index 835723706a7d..2eccb616bd3d 100644
--- a/Documentation/networking/ethtool-netlink.txt
+++ b/Documentation/networking/ethtool-netlink.txt
@@ -435,9 +435,9 @@ PARAMS_GET
 ----------
 
 PARAMS_GET request retrieves information provided by ioctl comands
-ETHTOOL_GCOALESCE (coalescing parameters) and ETHTOOL_GRINGPARAM (ring sizes).
-For each of these, there is a bit in header info_mask so that only one type of
-information can be requested.
+ETHTOOL_GCOALESCE (coalescing parameters), ETHTOOL_GRINGPARAM (ring sizes) and
+ETHTOOL_GPAUSEPARAM (pause parameters). For each of these, there is a bit in
+header info_mask so that only one type of information can be requested.
 
 Request contents:
 
@@ -447,6 +447,7 @@ Info mask bits:
 
     ETHTOOL_IM_PARAMS_COALESCE		coalescing parameters
     ETHTOOL_IM_PARAMS_RING		ring sizes
+    ETHTOOL_IM_PARAMS_PAUSE		pause parameters
 
 Response contents: On top level, there is one attribute for each of the
 information categories, the information is nested in it.
@@ -484,6 +485,10 @@ information categories, the information is nested in it.
         ETHTOOL_A_RING_RX_MINI_PENDING	    (u32)
         ETHTOOL_A_RING_RX_JUMBO_PENDING	    (u32)
         ETHTOOL_A_RING_TX_PENDING	    (u32)
+    ETHTOOL_A_PARAMS_PAUSE		(nested)	pause parameters
+        ETHTOOL_A_PAUSE_AUTONEG		    (bool)
+        ETHTOOL_A_PAUSE_RX		    (bool)
+        ETHTOOL_A_PAUSE_TX		    (bool)
 
 PARAMS_GET requests allow dumps and messages in the same format as response
 to them are broadcasted as notifications on change of these settings using
@@ -555,7 +560,7 @@ ETHTOOL_GCOALESCE		ETHTOOL_MSG_PARAMS_GET
 ETHTOOL_SCOALESCE		ETHTOOL_MSG_PARAMS_SET
 ETHTOOL_GRINGPARAM		ETHTOOL_MSG_PARAMS_GET
 ETHTOOL_SRINGPARAM		ETHTOOL_MSG_PARAMS_SET
-ETHTOOL_GPAUSEPARAM		n/a
+ETHTOOL_GPAUSEPARAM		ETHTOOL_MSG_PARAMS_GET
 ETHTOOL_SPAUSEPARAM		n/a
 ETHTOOL_GRXCSUM			ETHTOOL_MSG_SETTINGS_GET
 ETHTOOL_SRXCSUM			ETHTOOL_MSG_SETTINGS_SET
diff --git a/include/uapi/linux/ethtool_netlink.h b/include/uapi/linux/ethtool_netlink.h
index 4e101018a776..a77f5d0fcb67 100644
--- a/include/uapi/linux/ethtool_netlink.h
+++ b/include/uapi/linux/ethtool_netlink.h
@@ -312,6 +312,7 @@ enum {
 	ETHTOOL_A_PARAMS_HEADER,		/* nest - _A_HEADER_* */
 	ETHTOOL_A_PARAMS_COALESCE,		/* nest - _A_COALESCE_* */
 	ETHTOOL_A_PARAMS_RING,			/* nest - _A_RING_* */
+	ETHTOOL_A_PARAMS_PAUSE,			/* nest - _A_PAUSE_* */
 
 	/* add new constants above here */
 	__ETHTOOL_A_PARAMS_CNT,
@@ -320,9 +321,11 @@ enum {
 
 #define ETHTOOL_IM_PARAMS_COALESCE		(1U << 0)
 #define ETHTOOL_IM_PARAMS_RING			(1U << 1)
+#define ETHTOOL_IM_PARAMS_PAUSE			(1U << 2)
 
 #define ETHTOOL_IM_PARAMS_ALL (ETHTOOL_IM_PARAMS_COALESCE | \
-			       ETHTOOL_IM_PARAMS_RING)
+			       ETHTOOL_IM_PARAMS_RING | \
+			       ETHTOOL_IM_PARAMS_PAUSE)
 
 #define ETHTOOL_RF_PARAMS_ALL 0
 
@@ -372,6 +375,17 @@ enum {
 	ETHTOOL_A_RING_MAX = (__ETHTOOL_A_RING_CNT - 1)
 };
 
+enum {
+	ETHTOOL_A_PAUSE_UNSPEC,
+	ETHTOOL_A_PAUSE_AUTONEG,		/* u8 */
+	ETHTOOL_A_PAUSE_RX,			/* u8 */
+	ETHTOOL_A_PAUSE_TX,			/* u8 */
+
+	/* add new constants above here */
+	__ETHTOOL_A_PAUSE_CNT,
+	ETHTOOL_A_PAUSE_MAX = (__ETHTOOL_A_PAUSE_CNT - 1)
+};
+
 /* generic netlink info */
 #define ETHTOOL_GENL_NAME "ethtool"
 #define ETHTOOL_GENL_VERSION 1
diff --git a/net/ethtool/ioctl.c b/net/ethtool/ioctl.c
index e57585e724f5..7727768929ac 100644
--- a/net/ethtool/ioctl.c
+++ b/net/ethtool/ioctl.c
@@ -1589,6 +1589,7 @@ static int ethtool_get_pauseparam(struct net_device *dev, void __user *useraddr)
 static int ethtool_set_pauseparam(struct net_device *dev, void __user *useraddr)
 {
 	struct ethtool_pauseparam pauseparam;
+	int ret;
 
 	if (!dev->ethtool_ops->set_pauseparam)
 		return -EOPNOTSUPP;
@@ -1596,7 +1597,11 @@ static int ethtool_set_pauseparam(struct net_device *dev, void __user *useraddr)
 	if (copy_from_user(&pauseparam, useraddr, sizeof(pauseparam)))
 		return -EFAULT;
 
-	return dev->ethtool_ops->set_pauseparam(dev, &pauseparam);
+	ret = dev->ethtool_ops->set_pauseparam(dev, &pauseparam);
+	if (ret >= 0)
+		ethtool_notify(dev, NULL, ETHTOOL_MSG_PARAMS_NTF,
+			       ETHTOOL_IM_PARAMS_PAUSE, NULL);
+	return ret;
 }
 
 static int ethtool_self_test(struct net_device *dev, char __user *useraddr)
diff --git a/net/ethtool/params.c b/net/ethtool/params.c
index 17e3a8ff3e94..63142d910aeb 100644
--- a/net/ethtool/params.c
+++ b/net/ethtool/params.c
@@ -7,6 +7,7 @@ static const struct nla_policy params_get_policy[ETHTOOL_A_PARAMS_MAX + 1] = {
 	[ETHTOOL_A_PARAMS_HEADER]		= { .type = NLA_NESTED },
 	[ETHTOOL_A_PARAMS_COALESCE]		= { .type = NLA_REJECT },
 	[ETHTOOL_A_PARAMS_RING]			= { .type = NLA_REJECT },
+	[ETHTOOL_A_PARAMS_PAUSE]		= { .type = NLA_REJECT },
 };
 
 struct params_data {
@@ -16,6 +17,7 @@ struct params_data {
 	struct ethnl_reply_data		repdata_base;
 	struct ethtool_coalesce		coalesce;
 	struct ethtool_ringparam	ring;
+	struct ethtool_pauseparam	pause;
 };
 
 static int ethnl_get_coalesce(struct net_device *dev,
@@ -35,6 +37,15 @@ static int ethnl_get_ring(struct net_device *dev,
 	return 0;
 }
 
+static int ethnl_get_pause(struct net_device *dev,
+			   struct ethtool_pauseparam *data)
+{
+	if (!dev->ethtool_ops->get_pauseparam)
+		return -EOPNOTSUPP;
+	dev->ethtool_ops->get_pauseparam(dev, data);
+	return 0;
+}
+
 static int params_prepare(struct ethnl_req_info *req_info,
 			  struct genl_info *info)
 {
@@ -57,6 +68,11 @@ static int params_prepare(struct ethnl_req_info *req_info,
 		if (ret < 0)
 			req_mask &= ~ETHTOOL_IM_PARAMS_RING;
 	}
+	if (req_mask & ETHTOOL_IM_PARAMS_PAUSE) {
+		ret = ethnl_get_pause(dev, &data->pause);
+		if (ret < 0)
+			req_mask &= ~ETHTOOL_IM_PARAMS_PAUSE;
+	}
 	ethnl_after_ops(dev);
 
 	data->repdata_base.info_mask = req_mask;
@@ -76,6 +92,11 @@ static int params_ring_size(void)
 	return nla_total_size(8 * nla_total_size(sizeof(u32)));
 }
 
+static int params_pause_size(void)
+{
+	return nla_total_size(3 * nla_total_size(sizeof(u8)));
+}
+
 static int params_size(const struct ethnl_req_info *req_info)
 {
 	struct params_data *data =
@@ -88,6 +109,8 @@ static int params_size(const struct ethnl_req_info *req_info)
 		len += params_coalesce_size();
 	if (info_mask & ETHTOOL_IM_PARAMS_RING)
 		len += params_ring_size();
+	if (info_mask & ETHTOOL_IM_PARAMS_PAUSE)
+		len += params_pause_size();
 
 	return len;
 }
@@ -183,6 +206,25 @@ static int params_fill_ring(struct sk_buff *skb, struct ethtool_ringparam *data)
 	return 0;
 }
 
+static int params_fill_pause(struct sk_buff *skb,
+			     struct ethtool_pauseparam *data)
+{
+	struct nlattr *nest;
+
+	nest = nla_nest_start(skb, ETHTOOL_A_PARAMS_PAUSE);
+	if (!nest)
+		return -EMSGSIZE;
+	if (nla_put_u8(skb, ETHTOOL_A_PAUSE_AUTONEG, !!data->autoneg) ||
+	    nla_put_u8(skb, ETHTOOL_A_PAUSE_RX, !!data->rx_pause) ||
+	    nla_put_u8(skb, ETHTOOL_A_PAUSE_TX, !!data->tx_pause)) {
+		nla_nest_cancel(skb, nest);
+		return -EMSGSIZE;
+	}
+
+	nla_nest_end(skb, nest);
+	return 0;
+}
+
 static int params_fill(struct sk_buff *skb,
 		       const struct ethnl_req_info *req_info)
 {
@@ -201,6 +243,11 @@ static int params_fill(struct sk_buff *skb,
 		if (ret < 0)
 			return ret;
 	}
+	if (info_mask & ETHTOOL_IM_PARAMS_PAUSE) {
+		ret = params_fill_pause(skb, &data->pause);
+		if (ret < 0)
+			return ret;
+	}
 
 	return 0;
 }
@@ -228,6 +275,7 @@ static const struct nla_policy params_set_policy[ETHTOOL_A_PARAMS_MAX + 1] = {
 	[ETHTOOL_A_PARAMS_HEADER]		= { .type = NLA_NESTED },
 	[ETHTOOL_A_PARAMS_COALESCE]		= { .type = NLA_NESTED },
 	[ETHTOOL_A_PARAMS_RING]			= { .type = NLA_NESTED },
+	[ETHTOOL_A_PARAMS_PAUSE]		= { .type = NLA_REJECT },
 };
 
 static const struct nla_policy params_hdr_policy[ETHTOOL_A_HEADER_MAX + 1] = {
-- 
2.22.0

