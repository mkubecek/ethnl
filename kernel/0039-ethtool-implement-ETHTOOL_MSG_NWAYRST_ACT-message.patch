From 17f93ff23dcdc3f11a79493ceeac442df2ca5484 Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Fri, 31 Aug 2018 14:02:17 +0200
Subject: [PATCH 39/44] ethtool: implement ETHTOOL_MSG_NWAYRST_ACT message

Requests autonegotiation restart, equivalent of ETHTOOL_NWAY_RST.

If successful, send a notification in the same format.

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 Documentation/networking/ethtool-netlink.txt | 16 +++-
 include/uapi/linux/ethtool_netlink.h         | 15 ++++
 net/ethtool/Makefile                         |  3 +-
 net/ethtool/actions.c                        | 86 ++++++++++++++++++++
 net/ethtool/ioctl.c                          |  7 +-
 net/ethtool/netlink.c                        | 10 ++-
 net/ethtool/netlink.h                        |  9 ++
 7 files changed, 141 insertions(+), 5 deletions(-)
 create mode 100644 net/ethtool/actions.c

diff --git a/Documentation/networking/ethtool-netlink.txt b/Documentation/networking/ethtool-netlink.txt
index b100ac728afc..701b13be3f2e 100644
--- a/Documentation/networking/ethtool-netlink.txt
+++ b/Documentation/networking/ethtool-netlink.txt
@@ -156,6 +156,7 @@ Userspace to kernel:
     ETHTOOL_MSG_INFO_GET		get device information
     ETHTOOL_MSG_PARAMS_GET		get device parameters
     ETHTOOL_MSG_PARAMS_SET		set device parameters
+    ETHTOOL_MSG_NWAYRST_ACT		perform renegotiation
 
 Kernel to userspace:
 
@@ -166,6 +167,7 @@ Kernel to userspace:
     ETHTOOL_MSG_INFO_GET_REPLY		device information
     ETHTOOL_MSG_PARAMS_GET_REPLY	device parameters
     ETHTOOL_MSG_PARAMS_NTF		device parameters notification
+    ETHTOOL_MSG_NWAYRST_NTF		renegotiation notification
 
 "GET" requests are sent by userspace applications to retrieve device
 information. They usually do not contain any message specific attributes.
@@ -580,6 +582,18 @@ cannot be set by PARAMS_SET request.
 		- change configured FEC encodings
 
 
+NWAYRST_ACT
+-----------
+
+Request autonegotiation restart (equivalent of ETHTOOL_NWAY_RST).
+
+Request contents:
+
+    ETHTOOL_A_NWAYRST_HEADER		(nested)	request header
+
+If successful, a notification in the same format is sent.
+
+
 Request translation
 -------------------
 
@@ -597,7 +611,7 @@ ETHTOOL_GWOL			ETHTOOL_MSG_SETTINGS_GET
 ETHTOOL_SWOL			ETHTOOL_MSG_SETTINGS_SET
 ETHTOOL_GMSGLVL			ETHTOOL_MSG_SETTINGS_GET
 ETHTOOL_SMSGLVL			ETHTOOL_MSG_SETTINGS_SET
-ETHTOOL_NWAY_RST		n/a
+ETHTOOL_NWAY_RST		ETHTOOL_MSG_NWAYRST_ACT
 ETHTOOL_GLINK			ETHTOOL_MSG_SETTINGS_GET
 ETHTOOL_GEEPROM			n/a
 ETHTOOL_SEEPROM			n/a
diff --git a/include/uapi/linux/ethtool_netlink.h b/include/uapi/linux/ethtool_netlink.h
index d9285fdfa82c..d071bdb82803 100644
--- a/include/uapi/linux/ethtool_netlink.h
+++ b/include/uapi/linux/ethtool_netlink.h
@@ -20,6 +20,7 @@ enum {
 	ETHTOOL_MSG_INFO_GET,
 	ETHTOOL_MSG_PARAMS_GET,
 	ETHTOOL_MSG_PARAMS_SET,
+	ETHTOOL_MSG_NWAYRST_ACT,
 
 	/* add new constants above here */
 	__ETHTOOL_MSG_USER_CNT,
@@ -36,6 +37,7 @@ enum {
 	ETHTOOL_MSG_INFO_GET_REPLY,
 	ETHTOOL_MSG_PARAMS_GET_REPLY,
 	ETHTOOL_MSG_PARAMS_NTF,
+	ETHTOOL_MSG_NWAYRST_NTF,
 
 	/* add new constants above here */
 	__ETHTOOL_MSG_KERNEL_CNT,
@@ -434,6 +436,19 @@ enum {
 	ETHTOOL_A_FEC_MAX = (__ETHTOOL_A_FEC_CNT - 1)
 };
 
+/* NWAYRST */
+
+enum {
+	ETHTOOL_A_NWAYRST_UNSPEC,
+	ETHTOOL_A_NWAYRST_HEADER,		/* nest - _A_HEADER_* */
+
+	/* add new constants above here */
+	__ETHTOOL_A_NWAYRST_CNT,
+	ETHTOOL_A_NWAYRST_MAX = (__ETHTOOL_A_NWAYRST_CNT - 1)
+};
+
+#define ETHTOOL_RF_NWAYRST_ALL 0
+
 /* generic netlink info */
 #define ETHTOOL_GENL_NAME "ethtool"
 #define ETHTOOL_GENL_VERSION 1
diff --git a/net/ethtool/Makefile b/net/ethtool/Makefile
index c886f3d2c184..ca21edc7995f 100644
--- a/net/ethtool/Makefile
+++ b/net/ethtool/Makefile
@@ -4,4 +4,5 @@ obj-y				+= ioctl.o common.o
 
 obj-$(CONFIG_ETHTOOL_NETLINK)	+= ethtool_nl.o
 
-ethtool_nl-y	:= netlink.o bitset.o strset.o settings.o info.o params.o
+ethtool_nl-y	:= netlink.o bitset.o strset.o settings.o info.o params.o \
+		   actions.o
diff --git a/net/ethtool/actions.c b/net/ethtool/actions.c
new file mode 100644
index 000000000000..db4211364840
--- /dev/null
+++ b/net/ethtool/actions.c
@@ -0,0 +1,86 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+
+#include "netlink.h"
+#include "common.h"
+
+/* ACT_NWAY_RST */
+
+static const struct nla_policy nwayrst_policy[ETHTOOL_A_NWAYRST_MAX + 1] = {
+	[ETHTOOL_A_NWAYRST_UNSPEC]	= { .type = NLA_REJECT },
+	[ETHTOOL_A_NWAYRST_HEADER]	= { .type = NLA_NESTED },
+};
+
+static const struct nla_policy nwayrst_hdr_policy[ETHTOOL_A_HEADER_MAX + 1] = {
+	[ETHTOOL_A_HEADER_UNSPEC]	= { .type = NLA_REJECT },
+	[ETHTOOL_A_HEADER_DEV_INDEX]	= { .type = NLA_U32 },
+	[ETHTOOL_A_HEADER_DEV_NAME]	= { .type = NLA_NUL_STRING,
+					    .len = IFNAMSIZ - 1 },
+	[ETHTOOL_A_HEADER_INFOMASK]	= { .type = NLA_REJECT },
+	[ETHTOOL_A_HEADER_GFLAGS]	= { .type = NLA_REJECT },
+	[ETHTOOL_A_HEADER_RFLAGS]	= { .type = NLA_REJECT },
+};
+
+void ethnl_nwayrst_notify(struct net_device *dev,
+                          struct netlink_ext_ack *extack, unsigned int cmd,
+                          u32 req_mask, const void *data)
+{
+	struct sk_buff *skb;
+	void *msg_payload;
+	int msg_len;
+	int ret;
+
+	msg_len = ethnl_reply_header_size();
+	skb = genlmsg_new(msg_len, GFP_KERNEL);
+	if (!skb)
+		return;
+	msg_payload = ethnl_bcastmsg_put(skb, cmd);
+	if (!msg_payload)
+		goto err_skb;
+
+	ret = ethnl_fill_reply_header(skb, dev, ETHTOOL_A_NWAYRST_HEADER);
+	if (ret < 0)
+		goto err_skb;
+	genlmsg_end(skb, msg_payload);
+	ethnl_multicast(skb, dev);
+	return;
+
+err_skb:
+	nlmsg_free(skb);
+}
+
+int ethnl_act_nway_rst(struct sk_buff *skb, struct genl_info *info)
+{
+	struct nlattr *tb[ETHTOOL_A_NWAYRST_MAX + 1];
+	struct ethnl_req_info req_info = {};
+	struct net_device *dev;
+	int ret;
+
+	ret = nlmsg_parse(info->nlhdr, GENL_HDRLEN, tb, ETHTOOL_A_NWAYRST_MAX,
+			  nwayrst_policy, info->extack);
+	if (ret < 0)
+		return ret;
+	ret = ethnl_parse_header(&req_info, tb[ETHTOOL_A_NWAYRST_HEADER],
+				 genl_info_net(info), info->extack,
+				 nwayrst_hdr_policy, true);
+	if (ret < 0)
+		return ret;
+	dev = req_info.dev;
+	ret = -EOPNOTSUPP;
+	if (!dev->ethtool_ops->nway_reset)
+		goto out_dev;
+
+	rtnl_lock();
+	ret = ethnl_before_ops(dev);
+	if (ret < 0)
+		goto out_rtnl;
+	ret = dev->ethtool_ops->nway_reset(dev);
+	ethnl_after_ops(dev);
+	if (ret == 0)
+		ethtool_notify(dev, NULL, ETHTOOL_MSG_NWAYRST_NTF, 0, NULL);
+
+out_rtnl:
+	rtnl_unlock();
+out_dev:
+	dev_put(dev);
+	return ret;
+}
diff --git a/net/ethtool/ioctl.c b/net/ethtool/ioctl.c
index d50cf13e4457..0c2f854ad149 100644
--- a/net/ethtool/ioctl.c
+++ b/net/ethtool/ioctl.c
@@ -1284,10 +1284,15 @@ static int ethtool_set_eee(struct net_device *dev, char __user *useraddr)
 
 static int ethtool_nway_reset(struct net_device *dev)
 {
+	int ret;
+
 	if (!dev->ethtool_ops->nway_reset)
 		return -EOPNOTSUPP;
+	ret = dev->ethtool_ops->nway_reset(dev);
+	if (ret == 0)
+		ethtool_notify(dev, NULL, ETHTOOL_MSG_NWAYRST_NTF, 0, NULL);
 
-	return dev->ethtool_ops->nway_reset(dev);
+	return ret;
 }
 
 static int ethtool_get_link(struct net_device *dev, char __user *useraddr)
diff --git a/net/ethtool/netlink.c b/net/ethtool/netlink.c
index 1664912dd94f..953aa013e243 100644
--- a/net/ethtool/netlink.c
+++ b/net/ethtool/netlink.c
@@ -259,13 +259,13 @@ struct sk_buff *ethnl_reply_init(size_t payload, struct net_device *dev, u8 cmd,
 	return NULL;
 }
 
-static void *ethnl_bcastmsg_put(struct sk_buff *skb, u8 cmd)
+void *ethnl_bcastmsg_put(struct sk_buff *skb, u8 cmd)
 {
 	return genlmsg_put(skb, 0, ++ethnl_bcast_seq, &ethtool_genl_family, 0,
 			   cmd);
 }
 
-static int ethnl_multicast(struct sk_buff *skb, struct net_device *dev)
+int ethnl_multicast(struct sk_buff *skb, struct net_device *dev)
 {
 	return genlmsg_multicast_netns(&ethtool_genl_family, dev_net(dev), skb,
 				       0, ETHNL_MCGRP_MONITOR, GFP_KERNEL);
@@ -690,6 +690,7 @@ typedef void (*ethnl_notify_handler_t)(struct net_device *dev,
 static const ethnl_notify_handler_t ethnl_notify_handlers[] = {
 	[ETHTOOL_MSG_SETTINGS_NTF]	= ethnl_std_notify,
 	[ETHTOOL_MSG_PARAMS_NTF]	= ethnl_std_notify,
+	[ETHTOOL_MSG_NWAYRST_NTF]	= ethnl_nwayrst_notify,
 };
 
 void ethtool_notify(struct net_device *dev, struct netlink_ext_ack *extack,
@@ -773,6 +774,11 @@ static const struct genl_ops ethtool_genl_ops[] = {
 		.flags	= GENL_UNS_ADMIN_PERM,
 		.doit	= ethnl_set_params,
 	},
+	{
+		.cmd	= ETHTOOL_MSG_NWAYRST_ACT,
+		.flags	= GENL_UNS_ADMIN_PERM,
+		.doit	= ethnl_act_nway_rst,
+	},
 };
 
 static const struct genl_multicast_group ethtool_nl_mcgrps[] = {
diff --git a/net/ethtool/netlink.h b/net/ethtool/netlink.h
index b560924f0a98..101b3eff3b00 100644
--- a/net/ethtool/netlink.h
+++ b/net/ethtool/netlink.h
@@ -30,6 +30,8 @@ int ethnl_fill_reply_header(struct sk_buff *skb, struct net_device *dev,
 struct sk_buff *ethnl_reply_init(size_t payload, struct net_device *dev, u8 cmd,
 				 u16 hdr_attrtype, struct genl_info *info,
 				 void **ehdrp);
+void *ethnl_bcastmsg_put(struct sk_buff *skb, u8 cmd);
+int ethnl_multicast(struct sk_buff *skb, struct net_device *dev);
 
 #if BITS_PER_LONG == 64 && defined(__BIG_ENDIAN)
 void ethnl_bitmap_to_u32(unsigned long *bitmap, unsigned int nwords);
@@ -310,5 +312,12 @@ extern const struct get_request_ops params_request_ops;
 
 int ethnl_set_settings(struct sk_buff *skb, struct genl_info *info);
 int ethnl_set_params(struct sk_buff *skb, struct genl_info *info);
+int ethnl_act_nway_rst(struct sk_buff *skb, struct genl_info *info);
+
+/* notify handlers */
+
+void ethnl_nwayrst_notify(struct net_device *dev,
+			  struct netlink_ext_ack *extack, unsigned int cmd,
+			  u32 req_mask, const void *data);
 
 #endif /* _NET_ETHTOOL_NETLINK_H */
-- 
2.22.0

