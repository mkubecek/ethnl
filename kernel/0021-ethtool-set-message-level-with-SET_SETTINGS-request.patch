From be297515abb3dd0a679bf011156bfa6129022206 Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Fri, 8 Mar 2019 18:01:46 +0100
Subject: [PATCH 21/44] ethtool: set message level with SET_SETTINGS request

Allow setting device message level using ETHA_SETTINGS_DEBUG nested
attribute.

Unlike in ioctl interface "message level" is called "message mask" (as it
is in fact used as a bit mask) and put inside a nested attribute to allow
future extensions.

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 Documentation/networking/ethtool-netlink.txt |  8 +++-
 net/ethtool/settings.c                       | 45 +++++++++++++++++++-
 2 files changed, 50 insertions(+), 3 deletions(-)

diff --git a/Documentation/networking/ethtool-netlink.txt b/Documentation/networking/ethtool-netlink.txt
index 75e3ecc6e47b..3e12740da0be 100644
--- a/Documentation/networking/ethtool-netlink.txt
+++ b/Documentation/networking/ethtool-netlink.txt
@@ -342,6 +342,8 @@ to be passed with SET_SETTINGS request:
     ETHA_SETTINGS_WOL		(nested)	wake on LAN settings
         ETHA_WOL_MODES			(bitfield32)	wake on LAN modes
         ETHA_WOL_SOPASS			(binary)	SecureOn(tm) password
+    ETHA_SETTINGS_DEBUG		(nested)	debugging
+        ETHA_DEBUG_MSG_MASK		(bitfield32)	message mask
 
 ETHA_LINKMODES_OURS bit set allows setting advertised link modes. If
 autonegotiation is on (either set now or kept from before), advertised modes
@@ -357,7 +359,9 @@ selector are set to 0 or 1 according to value. To allow the semantics of the
 ioctl interface where the whole bitmap is set rather than only modified,
 selectors may have also bits not supported by device set and an error is only
 issued if any of them is also set in the value (i.e. if userspace tries to
-enable mode not supported by device).
+enable mode not supported by device). ETHA_SETTINGS_MSGLEVEL bitfield also
+allows bits not recognized by kernel in selector as long as the request does
+not attempt to enable them.
 
 
 Request translation
@@ -376,7 +380,7 @@ ETHTOOL_GREGS			n/a
 ETHTOOL_GWOL			ETHNL_CMD_GET_SETTINGS
 ETHTOOL_SWOL			ETHNL_CMD_SET_SETTINGS
 ETHTOOL_GMSGLVL			ETHNL_CMD_GET_SETTINGS
-ETHTOOL_SMSGLVL			n/a
+ETHTOOL_SMSGLVL			ETHNL_CMD_SET_SETTINGS
 ETHTOOL_NWAY_RST		n/a
 ETHTOOL_GLINK			n/a
 ETHTOOL_GEEPROM			n/a
diff --git a/net/ethtool/settings.c b/net/ethtool/settings.c
index e089ece1bd08..ec5006655712 100644
--- a/net/ethtool/settings.c
+++ b/net/ethtool/settings.c
@@ -502,6 +502,12 @@ static const struct nla_policy set_wol_policy[ETHA_LINKINFO_MAX + 1] = {
 					    .len = SOPASS_MAX },
 };
 
+static const struct nla_policy set_debug_policy[ETHA_DEBUG_MAX + 1] = {
+	[ETHA_DEBUG_UNSPEC]		= { .type = NLA_REJECT },
+	[ETHA_DEBUG_MSG_MASK]		= { .type = NLA_BITFIELD32,
+					    .validation_data = &all_bits },
+};
+
 static const struct nla_policy set_settings_policy[ETHA_SETTINGS_MAX + 1] = {
 	[ETHA_SETTINGS_UNSPEC]		= { .type = NLA_REJECT },
 	[ETHA_SETTINGS_DEV]		= { .type = NLA_NESTED },
@@ -510,7 +516,7 @@ static const struct nla_policy set_settings_policy[ETHA_SETTINGS_MAX + 1] = {
 	[ETHA_SETTINGS_LINK_INFO]	= { .type = NLA_NESTED },
 	[ETHA_SETTINGS_LINK_MODES]	= { .type = NLA_NESTED },
 	[ETHA_SETTINGS_WOL]		= { .type = NLA_NESTED },
-	[ETHA_SETTINGS_DEBUG]		= { .type = NLA_REJECT },
+	[ETHA_SETTINGS_DEBUG]		= { .type = NLA_NESTED },
 };
 
 static int ethnl_set_link_ksettings(struct genl_info *info,
@@ -695,6 +701,36 @@ static int update_wol(struct genl_info *info, struct nlattr *nest,
 	return ret;
 }
 
+static int update_debug(struct genl_info *info, struct nlattr *nest,
+			struct net_device *dev)
+{
+	struct nlattr *tb[ETHA_DEBUG_MAX + 1];
+	u32 msglevel;
+	int ret;
+
+	if (!nest)
+		return 0;
+	ret = nla_parse_nested_strict(tb, ETHA_DEBUG_MAX, nest,
+				      set_debug_policy, info->extack);
+	if (ret < 0)
+		return ret;
+
+	if (!dev->ethtool_ops->get_msglevel ||
+	    !dev->ethtool_ops->set_msglevel) {
+		ETHNL_SET_ERRMSG(info,
+				 "device does not provide msglvl access");
+		return -EOPNOTSUPP;
+	}
+	ret = 0;
+	msglevel = dev->ethtool_ops->get_msglevel(dev);
+	if (ethnl_update_bitfield32(&msglevel, tb[ETHA_DEBUG_MSG_MASK])) {
+		dev->ethtool_ops->set_msglevel(dev, msglevel);
+		ret = 1;
+	}
+
+	return ret;
+}
+
 int ethnl_set_settings(struct sk_buff *skb, struct genl_info *info)
 {
 	struct nlattr *tb[ETHA_SETTINGS_MAX + 1];
@@ -729,6 +765,13 @@ int ethnl_set_settings(struct sk_buff *skb, struct genl_info *info)
 		if (ret)
 			req_mask |= ETH_SETTINGS_IM_WOL;
 	}
+	if (tb[ETHA_SETTINGS_DEBUG]) {
+		ret = update_debug(info, tb[ETHA_SETTINGS_DEBUG], dev);
+		if (ret < 0)
+			goto out_ops;
+		if (ret)
+			req_mask |= ETH_SETTINGS_IM_DEBUG;
+	}
 	ret = 0;
 
 out_ops:
-- 
2.21.0

