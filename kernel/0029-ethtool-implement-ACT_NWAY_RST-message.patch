From 8a54b0ed25bb411e0f6899965cd4c6196333a5f5 Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Fri, 31 Aug 2018 14:02:17 +0200
Subject: [PATCH 29/34] ethtool: implement ACT_NWAY_RST message

Requests autonegotiation restart, equivalent of ETHTOOL_NWAY_RST.

If successful, send a notification in the same format.

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 Documentation/networking/ethtool-netlink.txt | 15 +++-
 include/uapi/linux/ethtool_netlink.h         | 11 +++
 net/ethtool/Makefile                         |  3 +-
 net/ethtool/actions.c                        | 75 ++++++++++++++++++++
 net/ethtool/ioctl.c                          |  7 +-
 net/ethtool/netlink.c                        |  6 ++
 net/ethtool/netlink.h                        |  7 ++
 7 files changed, 121 insertions(+), 3 deletions(-)
 create mode 100644 net/ethtool/actions.c

diff --git a/Documentation/networking/ethtool-netlink.txt b/Documentation/networking/ethtool-netlink.txt
index 227cc56aac17..c10351063f58 100644
--- a/Documentation/networking/ethtool-netlink.txt
+++ b/Documentation/networking/ethtool-netlink.txt
@@ -134,6 +134,7 @@ List of message types
     ETHNL_CMD_SET_SETTINGS
     ETHNL_CMD_GET_PARAMS
     ETHNL_CMD_SET_PARAMS
+    ETHNL_CMD_ACT_NWAY_RST
 
 All constants use ETHNL_CMD_ prefix, usually followed by "GET", "SET" or "ACT"
 to indicate the type.
@@ -552,6 +553,18 @@ cannot be set by SET_PARAMS request.
 		- change configured FEC encodings
 
 
+ACT_NWAY_RST
+------------
+
+Request autonegotiation restart (equivalent of ETHTOOL_NWAY_RST).
+
+Request contents:
+
+    ETHA_NWAYRST_DEV		(nested)	device identification
+
+If successful, a notification in the same format is sent.
+
+
 Request translation
 -------------------
 
@@ -569,7 +582,7 @@ ETHTOOL_GWOL			ETHNL_CMD_GET_SETTINGS
 ETHTOOL_SWOL			ETHNL_CMD_SET_SETTINGS
 ETHTOOL_GMSGLVL			ETHNL_CMD_GET_SETTINGS
 ETHTOOL_SMSGLVL			ETHNL_CMD_SET_SETTINGS
-ETHTOOL_NWAY_RST		n/a
+ETHTOOL_NWAY_RST		ETHNL_CMD_ACT_NWAY_RST
 ETHTOOL_GLINK			ETHNL_CMD_GET_SETTINGS
 ETHTOOL_GEEPROM			n/a
 ETHTOOL_SEEPROM			n/a
diff --git a/include/uapi/linux/ethtool_netlink.h b/include/uapi/linux/ethtool_netlink.h
index e3fa1003f31e..11dc4117f36e 100644
--- a/include/uapi/linux/ethtool_netlink.h
+++ b/include/uapi/linux/ethtool_netlink.h
@@ -16,6 +16,7 @@ enum {
 	ETHNL_CMD_SET_SETTINGS,
 	ETHNL_CMD_GET_PARAMS,
 	ETHNL_CMD_SET_PARAMS,
+	ETHNL_CMD_ACT_NWAY_RST,
 
 	__ETHNL_CMD_CNT,
 	ETHNL_CMD_MAX = (__ETHNL_CMD_CNT - 1)
@@ -376,6 +377,16 @@ enum {
 	ETHA_FEC_MAX = (__ETHA_FEC_CNT - 1)
 };
 
+/* ACT_NWAY_RST */
+
+enum {
+	ETHA_NWAYRST_UNSPEC,
+	ETHA_NWAYRST_DEV,			/* nest - ETHA_DEV_* */
+
+	__ETHA_NWAYRST_CNT,
+	ETHA_NWAYRST_MAX = (__ETHA_NWAYRST_CNT - 1)
+};
+
 /* generic netlink info */
 #define ETHTOOL_GENL_NAME "ethtool"
 #define ETHTOOL_GENL_VERSION 1
diff --git a/net/ethtool/Makefile b/net/ethtool/Makefile
index 95e93c153cf6..b3e88cf0f4c0 100644
--- a/net/ethtool/Makefile
+++ b/net/ethtool/Makefile
@@ -4,4 +4,5 @@ obj-y				+= ioctl.o common.o
 
 obj-$(CONFIG_ETHTOOL_NETLINK)	+= ethtool_nl.o
 
-ethtool_nl-y	:= netlink.o bitset.o strset.o info.o settings.o params.o
+ethtool_nl-y	:= netlink.o bitset.o strset.o info.o settings.o params.o \
+		   actions.o
diff --git a/net/ethtool/actions.c b/net/ethtool/actions.c
new file mode 100644
index 000000000000..7cfe0025403a
--- /dev/null
+++ b/net/ethtool/actions.c
@@ -0,0 +1,75 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+
+#include "netlink.h"
+#include "common.h"
+
+/* ACT_NWAY_RST */
+
+static const struct nla_policy nwayrst_policy[ETHA_NWAYRST_MAX + 1] = {
+	[ETHA_NWAYRST_UNSPEC]		= { .type = NLA_REJECT },
+	[ETHA_NWAYRST_DEV]		= { .type = NLA_NESTED },
+};
+
+void ethnl_nwayrst_notify(struct net_device *dev,
+                          struct netlink_ext_ack *extack, unsigned int cmd,
+                          u32 req_mask, const void *data)
+{
+	struct sk_buff *skb;
+	void *msg_payload;
+	int msg_len;
+	int ret;
+
+	msg_len = dev_ident_size();
+	skb = genlmsg_new(msg_len, GFP_KERNEL);
+	if (!skb)
+		return;
+	msg_payload = genlmsg_put(skb, 0, ++ethnl_bcast_seq,
+				  &ethtool_genl_family, 0,
+				  ETHNL_CMD_ACT_NWAY_RST);
+	if (!msg_payload)
+		goto err_skb;
+
+	ret = ethnl_fill_dev(skb, dev, ETHA_NWAYRST_DEV);
+	if (ret < 0)
+		goto err_skb;
+	genlmsg_end(skb, msg_payload);
+	genlmsg_multicast(&ethtool_genl_family, skb, 0, ETHNL_MCGRP_MONITOR,
+			  GFP_KERNEL);
+	return;
+
+err_skb:
+	nlmsg_free(skb);
+}
+
+int ethnl_act_nway_rst(struct sk_buff *skb, struct genl_info *info)
+{
+	struct nlattr *tb[ETHA_NWAYRST_MAX + 1];
+	struct net_device *dev;
+	int ret;
+
+	ret = ethnlmsg_parse(info->nlhdr, tb, ETHA_NWAYRST_MAX, nwayrst_policy,
+			     info);
+	if (ret < 0)
+		return ret;
+	dev = ethnl_dev_get(info, tb[ETHA_NWAYRST_DEV]);
+	if (IS_ERR(dev))
+		return PTR_ERR(dev);
+	ret = -EOPNOTSUPP;
+	if (!dev->ethtool_ops->nway_reset)
+		goto out_dev;
+
+	rtnl_lock();
+	ret = ethnl_before_ops(dev);
+	if (ret < 0)
+		goto out_rtnl;
+	ret = dev->ethtool_ops->nway_reset(dev);
+	ethnl_after_ops(dev);
+	if (ret == 0)
+		ethtool_notify(dev, NULL, ETHNL_CMD_ACT_NWAY_RST, 0, NULL);
+
+out_rtnl:
+	rtnl_unlock();
+out_dev:
+	dev_put(dev);
+	return ret;
+}
diff --git a/net/ethtool/ioctl.c b/net/ethtool/ioctl.c
index 87a345e78a18..b75e64455f15 100644
--- a/net/ethtool/ioctl.c
+++ b/net/ethtool/ioctl.c
@@ -1282,10 +1282,15 @@ static int ethtool_set_eee(struct net_device *dev, char __user *useraddr)
 
 static int ethtool_nway_reset(struct net_device *dev)
 {
+	int ret;
+
 	if (!dev->ethtool_ops->nway_reset)
 		return -EOPNOTSUPP;
+	ret = dev->ethtool_ops->nway_reset(dev);
+	if (ret == 0)
+		ethtool_notify(dev, NULL, ETHNL_CMD_ACT_NWAY_RST, 0, NULL);
 
-	return dev->ethtool_ops->nway_reset(dev);
+	return ret;
 }
 
 static int ethtool_get_link(struct net_device *dev, char __user *useraddr)
diff --git a/net/ethtool/netlink.c b/net/ethtool/netlink.c
index 1b54171c16dc..bd84b3a363e2 100644
--- a/net/ethtool/netlink.c
+++ b/net/ethtool/netlink.c
@@ -565,6 +565,7 @@ typedef void (*ethnl_notify_handler_t)(struct net_device *dev,
 ethnl_notify_handler_t ethnl_notify_handlers[] = {
 	[ETHNL_CMD_SET_SETTINGS]	= ethnl_std_notify,
 	[ETHNL_CMD_SET_PARAMS]		= ethnl_std_notify,
+	[ETHNL_CMD_ACT_NWAY_RST]	= ethnl_nwayrst_notify,
 };
 
 void ethtool_notify(struct net_device *dev, struct netlink_ext_ack *extack,
@@ -694,6 +695,11 @@ static const struct genl_ops ethtool_genl_ops[] = {
 		.flags	= GENL_UNS_ADMIN_PERM,
 		.doit	= ethnl_set_params,
 	},
+	{
+		.cmd	= ETHNL_CMD_ACT_NWAY_RST,
+		.flags	= GENL_UNS_ADMIN_PERM,
+		.doit	= ethnl_act_nway_rst,
+	},
 };
 
 static const struct genl_multicast_group ethtool_nl_mcgrps[] = {
diff --git a/net/ethtool/netlink.h b/net/ethtool/netlink.h
index a9983fc6d197..ecd064f7516e 100644
--- a/net/ethtool/netlink.h
+++ b/net/ethtool/netlink.h
@@ -289,5 +289,12 @@ struct get_request_ops {
 
 int ethnl_set_settings(struct sk_buff *skb, struct genl_info *info);
 int ethnl_set_params(struct sk_buff *skb, struct genl_info *info);
+int ethnl_act_nway_rst(struct sk_buff *skb, struct genl_info *info);
+
+/* notify handlers */
+
+void ethnl_nwayrst_notify(struct net_device *dev,
+			  struct netlink_ext_ack *extack, unsigned int cmd,
+			  u32 req_mask, const void *data);
 
 #endif /* _NET_ETHTOOL_NETLINK_H */
-- 
2.20.1

