From 44a68b2f7230cc3bb7e69a6bf879e1a05f75766a Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Mon, 11 Mar 2019 08:30:12 +0100
Subject: [PATCH 33/44] ethtool: provide channel counts in GET_PARAMS request

Add information about channel counts (as provided by ETHTOOL_GCHANNELS
ioctl command) in GET_PARAMS reply when ETH_PARAMS_IM_CHANNELS flag is set
in the request.

Send notification in the same format as reply when channel counts are
modified using the ioctl interface (ETHTOOL_SCHANNELS command).

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 Documentation/networking/ethtool-netlink.txt | 19 +++++--
 include/uapi/linux/ethtool_netlink.h         | 20 +++++++-
 net/ethtool/ioctl.c                          |  7 ++-
 net/ethtool/params.c                         | 53 ++++++++++++++++++++
 4 files changed, 93 insertions(+), 6 deletions(-)

diff --git a/Documentation/networking/ethtool-netlink.txt b/Documentation/networking/ethtool-netlink.txt
index 6a044246838d..ad21116016c3 100644
--- a/Documentation/networking/ethtool-netlink.txt
+++ b/Documentation/networking/ethtool-netlink.txt
@@ -407,9 +407,10 @@ GET_PARAMS
 ----------
 
 GET_PARAMS request retrieves information provided by ioctl comands
-ETHTOOL_GCOALESCE (coalescing parameters), ETHTOOL_GRINGPARAM (ring sizes) and
-ETHTOOL_GPAUSEPARAM (pause parameters). For each of these, there is a bit in
-header info_mask so that only one type of information can be requested.
+ETHTOOL_GCOALESCE (coalescing parameters), ETHTOOL_GRINGPARAM (ring sizes),
+ETHTOOL_GPAUSEPARAM (pause parameters) and ETHTOOL_GCHANNELS (channel counts).
+For each of these, there is a bit in header info_mask so that only one type of
+information can be requested.
 
 Request contents:
 
@@ -422,6 +423,7 @@ Info mask bits:
     ETH_PARAMS_IM_COALESCE		coalescing parameters
     ETH_PARAMS_IM_RING			ring sizes
     ETH_PARAMS_IM_PAUSE			pause parameters
+    ETH_PARAMS_IM_CHANNELS		channel counts
 
 Response contents: On top level, there is one attribute for each of the
 information categories, the information is nested in it.
@@ -463,6 +465,15 @@ information categories, the information is nested in it.
         ETHTOOL_A_PAUSE_AUTONEG		    (bool)
         ETHTOOL_A_PAUSE_RX		    (bool)
         ETHTOOL_A_PAUSE_TX		    (bool)
+    ETHTOOL_A_PARAMS_CHANNELS		(nested)	channel counts
+        ETHTOOL_A_CHANNELS_MAX_RX	    (u32)
+        ETHTOOL_A_CHANNELS_MAX_TX	    (u32)
+        ETHTOOL_A_CHANNELS_MAX_OTHER	    (u32)
+        ETHTOOL_A_CHANNELS_MAX_COMBINED	    (u32)
+        ETHTOOL_A_CHANNELS_RX_COUNT	    (u32)
+        ETHTOOL_A_CHANNELS_TX_COUNT	    (u32)
+        ETHTOOL_A_CHANNELS_OTHER_COUNT	    (u32)
+        ETHTOOL_A_CHANNELS_COMBINED_COUNT   (u32)
 
 GET_PARAMS requests allow dumps and messages in the same format as response
 to them are broadcasted as notifications on change of these settings using
@@ -579,7 +590,7 @@ ETHTOOL_GRXFHINDIR		n/a
 ETHTOOL_SRXFHINDIR		n/a
 ETHTOOL_GFEATURES		ETHNL_CMD_GET_SETTINGS
 ETHTOOL_SFEATURES		ETHNL_CMD_SET_SETTINGS
-ETHTOOL_GCHANNELS		n/a
+ETHTOOL_GCHANNELS		ETHNL_CMD_GET_PARAMS
 ETHTOOL_SCHANNELS		n/a
 ETHTOOL_SET_DUMP		n/a
 ETHTOOL_GET_DUMP_FLAG		n/a
diff --git a/include/uapi/linux/ethtool_netlink.h b/include/uapi/linux/ethtool_netlink.h
index 1313fd655991..41b95445fc97 100644
--- a/include/uapi/linux/ethtool_netlink.h
+++ b/include/uapi/linux/ethtool_netlink.h
@@ -295,6 +295,7 @@ enum {
 	ETHTOOL_A_PARAMS_COALESCE,		/* nest - ETHTOOL_A_COALESCE_* */
 	ETHTOOL_A_PARAMS_RING,			/* nest - ETHTOOL_A_RING_* */
 	ETHTOOL_A_PARAMS_PAUSE,			/* nest - ETHTOOL_A_PAUSE_* */
+	ETHTOOL_A_PARAMS_CHANNELS,		/* nest - ETHTOOL_A_CHANNELS_* */
 
 	__ETHTOOL_A_PARAMS_CNT,
 	ETHTOOL_A_PARAMS_MAX = (__ETHTOOL_A_PARAMS_CNT - 1)
@@ -303,10 +304,12 @@ enum {
 #define ETH_PARAMS_IM_COALESCE			(1U << 0)
 #define ETH_PARAMS_IM_RING			(1U << 1)
 #define ETH_PARAMS_IM_PAUSE			(1U << 2)
+#define ETH_PARAMS_IM_CHANNELS			(1U << 3)
 
 #define ETH_PARAMS_IM_ALL (ETH_PARAMS_IM_COALESCE | \
 			   ETH_PARAMS_IM_RING | \
-			   ETH_PARAMS_IM_PAUSE)
+			   ETH_PARAMS_IM_PAUSE | \
+			   ETH_PARAMS_IM_CHANNELS)
 
 enum {
 	ETHTOOL_A_COALESCE_UNSPEC,
@@ -362,6 +365,21 @@ enum {
 	ETHTOOL_A_PAUSE_MAX = (__ETHTOOL_A_PAUSE_CNT - 1)
 };
 
+enum {
+	ETHTOOL_A_CHANNELS_UNSPEC,
+	ETHTOOL_A_CHANNELS_MAX_RX,		/* u32 */
+	ETHTOOL_A_CHANNELS_MAX_TX,		/* u32 */
+	ETHTOOL_A_CHANNELS_MAX_OTHER,		/* u32 */
+	ETHTOOL_A_CHANNELS_MAX_COMBINED,	/* u32 */
+	ETHTOOL_A_CHANNELS_RX_COUNT,		/* u32 */
+	ETHTOOL_A_CHANNELS_TX_COUNT,		/* u32 */
+	ETHTOOL_A_CHANNELS_OTHER_COUNT,		/* u32 */
+	ETHTOOL_A_CHANNELS_COMBINED_COUNT,	/* u32 */
+
+	__ETHTOOL_A_CHANNELS_CNT,
+	ETHTOOL_A_CHANNELS_MAX = (__ETHTOOL_A_CHANNELS_CNT - 1)
+};
+
 /* generic netlink info */
 #define ETHTOOL_GENL_NAME "ethtool"
 #define ETHTOOL_GENL_VERSION 1
diff --git a/net/ethtool/ioctl.c b/net/ethtool/ioctl.c
index 0c08e9c0c8d4..484cde939527 100644
--- a/net/ethtool/ioctl.c
+++ b/net/ethtool/ioctl.c
@@ -1537,6 +1537,7 @@ static noinline_for_stack int ethtool_set_channels(struct net_device *dev,
 	u16 from_channel, to_channel;
 	u32 max_rx_in_use = 0;
 	unsigned int i;
+	int ret;
 
 	if (!dev->ethtool_ops->set_channels || !dev->ethtool_ops->get_channels)
 		return -EOPNOTSUPP;
@@ -1568,7 +1569,11 @@ static noinline_for_stack int ethtool_set_channels(struct net_device *dev,
 		if (xdp_get_umem_from_qid(dev, i))
 			return -EINVAL;
 
-	return dev->ethtool_ops->set_channels(dev, &channels);
+	ret = dev->ethtool_ops->set_channels(dev, &channels);
+	if (ret == 0)
+		ethtool_notify(dev, NULL, ETHNL_CMD_SET_PARAMS,
+			       ETH_PARAMS_IM_CHANNELS, NULL);
+	return ret;
 }
 
 static int ethtool_get_pauseparam(struct net_device *dev, void __user *useraddr)
diff --git a/net/ethtool/params.c b/net/ethtool/params.c
index b7813e879974..b313a9e242dc 100644
--- a/net/ethtool/params.c
+++ b/net/ethtool/params.c
@@ -10,6 +10,7 @@ static const struct nla_policy get_params_policy[ETHTOOL_A_PARAMS_MAX + 1] = {
 	[ETHTOOL_A_PARAMS_COALESCE]		= { .type = NLA_REJECT },
 	[ETHTOOL_A_PARAMS_RING]			= { .type = NLA_REJECT },
 	[ETHTOOL_A_PARAMS_PAUSE]		= { .type = NLA_REJECT },
+	[ETHTOOL_A_PARAMS_CHANNELS]		= { .type = NLA_REJECT },
 };
 
 struct params_data {
@@ -20,6 +21,7 @@ struct params_data {
 	struct ethtool_coalesce		coalesce;
 	struct ethtool_ringparam	ring;
 	struct ethtool_pauseparam	pause;
+	struct ethtool_channels		channels;
 };
 
 static int parse_params(struct common_req_info *req_info, struct sk_buff *skb,
@@ -77,6 +79,15 @@ static int ethnl_get_pause(struct net_device *dev,
 	return 0;
 }
 
+static int ethnl_get_channels(struct net_device *dev,
+			      struct ethtool_channels *data)
+{
+	if (!dev->ethtool_ops->get_channels)
+		return -EOPNOTSUPP;
+	dev->ethtool_ops->get_channels(dev, data);
+	return 0;
+}
+
 static int prepare_params(struct common_req_info *req_info,
 			  struct genl_info *info)
 {
@@ -104,6 +115,11 @@ static int prepare_params(struct common_req_info *req_info,
 		if (ret < 0)
 			req_mask &= ~ETH_PARAMS_IM_PAUSE;
 	}
+	if (req_mask & ETH_PARAMS_IM_CHANNELS) {
+		ret = ethnl_get_channels(dev, &data->channels);
+		if (ret < 0)
+			req_mask &= ~ETH_PARAMS_IM_CHANNELS;
+	}
 	ethnl_after_ops(dev);
 
 	data->repdata_base.info_mask = req_mask;
@@ -128,6 +144,11 @@ static int pause_size(void)
 	return nla_total_size(3 * nla_total_size(sizeof(u8)));
 }
 
+static int channels_size(void)
+{
+	return nla_total_size(8 * nla_total_size(sizeof(u32)));
+}
+
 static int params_size(const struct common_req_info *req_info)
 {
 	struct params_data *data =
@@ -142,6 +163,8 @@ static int params_size(const struct common_req_info *req_info)
 		len += ring_size();
 	if (info_mask & ETH_PARAMS_IM_PAUSE)
 		len += pause_size();
+	if (info_mask & ETH_PARAMS_IM_CHANNELS)
+		len += channels_size();
 
 	return len;
 }
@@ -251,6 +274,30 @@ static int fill_pause(struct sk_buff *skb, struct ethtool_pauseparam *data)
 	return 0;
 }
 
+static int fill_channels(struct sk_buff *skb, struct ethtool_channels *data)
+{
+	struct nlattr *nest = ethnl_nest_start(skb, ETHTOOL_A_PARAMS_CHANNELS);
+
+	if (!nest)
+		return -EMSGSIZE;
+	if (nla_put_u32(skb, ETHTOOL_A_CHANNELS_MAX_RX, data->max_rx) ||
+	    nla_put_u32(skb, ETHTOOL_A_CHANNELS_MAX_TX, data->max_tx) ||
+	    nla_put_u32(skb, ETHTOOL_A_CHANNELS_MAX_OTHER, data->max_other) ||
+	    nla_put_u32(skb, ETHTOOL_A_CHANNELS_MAX_COMBINED,
+			data->max_combined) ||
+	    nla_put_u32(skb, ETHTOOL_A_CHANNELS_RX_COUNT, data->rx_count) ||
+	    nla_put_u32(skb, ETHTOOL_A_CHANNELS_TX_COUNT, data->tx_count) ||
+	    nla_put_u32(skb, ETHTOOL_A_CHANNELS_OTHER_COUNT,
+			data->other_count) ||
+	    nla_put_u32(skb, ETHTOOL_A_CHANNELS_COMBINED_COUNT,
+			data->combined_count)) {
+		return -EMSGSIZE;
+	}
+
+	nla_nest_end(skb, nest);
+	return 0;
+}
+
 static int fill_params(struct sk_buff *skb,
 		       const struct common_req_info *req_info)
 {
@@ -274,6 +321,11 @@ static int fill_params(struct sk_buff *skb,
 		if (ret < 0)
 			return ret;
 	}
+	if (info_mask & ETH_PARAMS_IM_CHANNELS) {
+		ret = fill_channels(skb, &data->channels);
+		if (ret < 0)
+			return ret;
+	}
 
 	return 0;
 }
@@ -301,6 +353,7 @@ static const struct nla_policy set_params_policy[ETHTOOL_A_PARAMS_MAX + 1] = {
 	[ETHTOOL_A_PARAMS_COALESCE]		= { .type = NLA_NESTED },
 	[ETHTOOL_A_PARAMS_RING]			= { .type = NLA_NESTED },
 	[ETHTOOL_A_PARAMS_PAUSE]		= { .type = NLA_NESTED },
+	[ETHTOOL_A_PARAMS_CHANNELS]		= { .type = NLA_REJECT },
 };
 
 static const struct nla_policy coalesce_policy[ETHTOOL_A_COALESCE_MAX + 1] = {
-- 
2.21.0

