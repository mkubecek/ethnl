From 17264bdc91122d588d29a7a9f7fd2f9bdce0dfea Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Sat, 16 Feb 2019 15:19:02 +0100
Subject: [PATCH 18/43] ethtool: provide message level in SETTINGS_GET request

Add information about supported and enabled message levels to the
SETTINGS_GET reply when ETHTOOL_IM_SETTINGS_DEBUG flag is set in the
request.

Unlike in the ioctl interface, "message level" is called "message mask" as
it is in fact interpreted as a bit mask. It is put into a nested attribute
ETHTOOL_A_SETTINGS_DEBUG to allow future extensions (e.g. an actual
verbosity level).

Send notification in the same format as reply when message level is
modified using the ioctl interface (ETHTOOL_SMSGLVL command).

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 Documentation/networking/ethtool-netlink.txt |  9 ++++-
 include/linux/netdevice.h                    |  2 +
 include/uapi/linux/ethtool_netlink.h         | 14 ++++++-
 net/ethtool/ioctl.c                          |  3 ++
 net/ethtool/settings.c                       | 40 ++++++++++++++++++++
 5 files changed, 66 insertions(+), 2 deletions(-)

diff --git a/Documentation/networking/ethtool-netlink.txt b/Documentation/networking/ethtool-netlink.txt
index d4491f305d3d..8e6c8464c188 100644
--- a/Documentation/networking/ethtool-netlink.txt
+++ b/Documentation/networking/ethtool-netlink.txt
@@ -232,6 +232,7 @@ Info mask bits meaning:
     ETHTOOL_IM_SETTINGS_LINKMODES	link modes and related
     ETHTOOL_IM_SETTINGS_LINKSTATE	link state
     ETHTOOL_IM_SETTINGS_WOL		struct ethtool_wolinfo
+    ETHTOOL_IM_SETTINGS_DEBUG		debugging
 
 Response contents:
 
@@ -253,6 +254,8 @@ Response contents:
     ETHTOOL_A_SETTINGS_WOL		(nested)	wake on LAN settings
         ETHTOOL_A_WOL_MODES		    (bitfield32)    wake on LAN modes
         ETHTOOL_A_WOL_SOPASS		    (binary)	    SecureOn password
+    ETHTOOL_A_SETTINGS_DEBUG		(nested)	debugging
+        ETHTOOL_A_DEBUG_MSG_MASK	    (bitfield32)    debug message mask
 
 Most of the attributes and their values have the same meaning as matching
 members of the corresponding ioctl structures. For ETHTOOL_A_LINKMODES_OURS,
@@ -262,6 +265,10 @@ ETHTOOL_A_LINKMODES_PEER in the reply is a bit list.
 For ETHTOOL_A_WOL_MODES, selector reports wake on LAN modes supported by the
 device and value enabled modes.
 
+ETHTOOL_A_DEBUG_MSG_MASK corresponds to message level (which is actually
+a bitfield) as reported by ETHTOOL_GMSGLVL. The selector reports all message
+types recognized by kernel and value types enabled for the device.
+
 SETTINGS_GET request is allowed for unprivileged user but ETHTOOL_A_WOL_SOPASS
 is only provided by kernel in response to privileged (netns CAP_NET_ADMIN)
 requests.
@@ -324,7 +331,7 @@ ETHTOOL_GDRVINFO		n/a
 ETHTOOL_GREGS			n/a
 ETHTOOL_GWOL			ETHTOOL_MSG_SETTINGS_GET
 ETHTOOL_SWOL			ETHTOOL_MSG_SETTINGS_SET
-ETHTOOL_GMSGLVL			n/a
+ETHTOOL_GMSGLVL			ETHTOOL_MSG_SETTINGS_GET
 ETHTOOL_SMSGLVL			n/a
 ETHTOOL_NWAY_RST		n/a
 ETHTOOL_GLINK			ETHTOOL_MSG_SETTINGS_GET
diff --git a/include/linux/netdevice.h b/include/linux/netdevice.h
index dd4f021542d5..9d44f6a8d664 100644
--- a/include/linux/netdevice.h
+++ b/include/linux/netdevice.h
@@ -3856,6 +3856,8 @@ enum {
 	NETIF_MSG_PKTDATA	= 0x1000,
 	NETIF_MSG_HW		= 0x2000,
 	NETIF_MSG_WOL		= 0x4000,
+
+	NETIF_MSG_ALL		= 0x7fff,
 };
 
 #define netif_msg_drv(p)	((p)->msg_enable & NETIF_MSG_DRV)
diff --git a/include/uapi/linux/ethtool_netlink.h b/include/uapi/linux/ethtool_netlink.h
index c99d7cd87049..f2784e2254e4 100644
--- a/include/uapi/linux/ethtool_netlink.h
+++ b/include/uapi/linux/ethtool_netlink.h
@@ -138,6 +138,7 @@ enum {
 	ETHTOOL_A_SETTINGS_LINK_MODES,		/* nest - ETHTOOL_A_LINKMODES_* */
 	ETHTOOL_A_SETTINGS_LINK_STATE,		/* nest - ETHTOOL_A_LINKSTATE_* */
 	ETHTOOL_A_SETTINGS_WOL,			/* nest - ETHTOOL_A_WOL_* */
+	ETHTOOL_A_SETTINGS_DEBUG,		/* nest - ETHTOOL_A_DEBUG_* */
 
 	/* add new constants above here */
 	__ETHTOOL_A_SETTINGS_CNT,
@@ -148,11 +149,13 @@ enum {
 #define ETHTOOL_IM_SETTINGS_LINKMODES		(1U << 1)
 #define ETHTOOL_IM_SETTINGS_LINKSTATE		(1U << 2)
 #define ETHTOOL_IM_SETTINGS_WOL			(1U << 3)
+#define ETHTOOL_IM_SETTINGS_DEBUG		(1U << 4)
 
 #define ETHTOOL_IM_SETTINGS_ALL (ETHTOOL_IM_SETTINGS_LINKINFO | \
 				 ETHTOOL_IM_SETTINGS_LINKMODES | \
 				 ETHTOOL_IM_SETTINGS_LINKSTATE | \
-				 ETHTOOL_IM_SETTINGS_WOL)
+				 ETHTOOL_IM_SETTINGS_WOL | \
+				 ETHTOOL_IM_SETTINGS_DEBUG)
 
 enum {
 	ETHTOOL_A_LINKINFO_UNSPEC,
@@ -199,6 +202,15 @@ enum {
 	ETHTOOL_A_WOL_MAX = (__ETHTOOL_A_WOL_CNT - 1)
 };
 
+enum {
+	ETHTOOL_A_DEBUG_UNSPEC,
+	ETHTOOL_A_DEBUG_MSG_MASK,		/* bitfield32 */
+
+	/* add new constants above here */
+	__ETHTOOL_A_DEBUG_CNT,
+	ETHTOOL_A_DEBUG_MAX = (__ETHTOOL_A_DEBUG_CNT - 1)
+};
+
 /* generic netlink info */
 #define ETHTOOL_GENL_NAME "ethtool"
 #define ETHTOOL_GENL_VERSION 1
diff --git a/net/ethtool/ioctl.c b/net/ethtool/ioctl.c
index 2b3560217934..496b998f6614 100644
--- a/net/ethtool/ioctl.c
+++ b/net/ethtool/ioctl.c
@@ -2536,6 +2536,9 @@ int dev_ethtool(struct net *net, struct ifreq *ifr)
 	case ETHTOOL_SMSGLVL:
 		rc = ethtool_set_value_void(dev, useraddr,
 				       dev->ethtool_ops->set_msglevel);
+		if (rc >= 0)
+			ethtool_notify(dev, NULL, ETHTOOL_MSG_SETTINGS_NTF,
+				       ETHTOOL_IM_SETTINGS_DEBUG, NULL);
 		break;
 	case ETHTOOL_GEEE:
 		rc = ethtool_get_eee(dev, useraddr);
diff --git a/net/ethtool/settings.c b/net/ethtool/settings.c
index 84b2ce7f153a..61bd2c9b3288 100644
--- a/net/ethtool/settings.c
+++ b/net/ethtool/settings.c
@@ -14,6 +14,7 @@ struct settings_data {
 	struct ethtool_wolinfo		wolinfo;
 	struct ethtool_link_settings	*lsettings;
 	int				link;
+	u32				msglevel;
 	bool				lpm_empty;
 };
 
@@ -125,6 +126,7 @@ static const struct nla_policy settings_get_policy[ETHTOOL_A_SETTINGS_MAX + 1] =
 	[ETHTOOL_A_SETTINGS_LINK_MODES]	= { .type = NLA_REJECT },
 	[ETHTOOL_A_SETTINGS_LINK_STATE]	= { .type = NLA_REJECT },
 	[ETHTOOL_A_SETTINGS_WOL]	= { .type = NLA_REJECT },
+	[ETHTOOL_A_SETTINGS_DEBUG]	= { .type = NLA_REJECT },
 };
 
 /* parse_request() handler */
@@ -192,6 +194,7 @@ static int settings_prepare(struct ethnl_req_info *req_info,
 	struct settings_data *data =
 		container_of(req_info, struct settings_data, reqinfo_base);
 	struct net_device *dev = data->repdata_base.dev;
+	const struct ethtool_ops *eops = dev->ethtool_ops;
 	u32 req_mask = req_info->req_mask;
 	int ret;
 
@@ -227,6 +230,12 @@ static int settings_prepare(struct ethnl_req_info *req_info,
 		if (ret < 0)
 			req_mask &= ~ETHTOOL_IM_SETTINGS_WOL;
 	}
+	if (req_mask & ETHTOOL_IM_SETTINGS_DEBUG) {
+		if (eops->get_msglevel)
+			data->msglevel = eops->get_msglevel(dev);
+		else
+			req_mask &= ~ETHTOOL_IM_SETTINGS_DEBUG;
+	}
 	ethnl_after_ops(dev);
 
 	data->repdata_base.info_mask = req_mask;
@@ -289,6 +298,11 @@ static int settings_wol_size(void)
 			      nla_total_size(SOPASS_MAX));
 }
 
+static int settings_debug_size(void)
+{
+	return nla_total_size(nla_total_size(sizeof(struct nla_bitfield32)));
+}
+
 /* reply_size() handler
  *
  * To keep things simple, reserve space for some attributes which may not
@@ -316,6 +330,8 @@ static int settings_size(const struct ethnl_req_info *req_info)
 		len += settings_linkstate_size(data->link);
 	if (info_mask & ETHTOOL_IM_SETTINGS_WOL)
 		len += settings_wol_size();
+	if (info_mask & ETHTOOL_IM_SETTINGS_DEBUG)
+		len += settings_debug_size();
 
 	return len;
 }
@@ -435,6 +451,24 @@ static int settings_fill_wolinfo(struct sk_buff *skb,
 	return -EMSGSIZE;
 }
 
+static int settings_fill_debug(struct sk_buff *skb, u32 msglevel)
+{
+	struct nlattr *nest;
+
+	nest = nla_nest_start(skb, ETHTOOL_A_SETTINGS_DEBUG);
+	if (!nest)
+		return -EMSGSIZE;
+	if (nla_put_bitfield32(skb, ETHTOOL_A_DEBUG_MSG_MASK, msglevel,
+			       NETIF_MSG_ALL))
+		goto err;
+	nla_nest_end(skb, nest);
+	return 0;
+
+err:
+	nla_nest_cancel(skb, nest);
+	return -EMSGSIZE;
+}
+
 /* fill_reply() handler */
 static int settings_fill(struct sk_buff *skb,
 			 const struct ethnl_req_info *req_info)
@@ -467,6 +501,11 @@ static int settings_fill(struct sk_buff *skb,
 		if (ret < 0)
 			return ret;
 	}
+	if (info_mask & ETHTOOL_IM_SETTINGS_DEBUG) {
+		ret = settings_fill_debug(skb, data->msglevel);
+		if (ret < 0)
+			return ret;
+	}
 
 	return 0;
 }
@@ -521,6 +560,7 @@ static const struct nla_policy settings_set_policy[ETHTOOL_A_SETTINGS_MAX + 1] =
 	[ETHTOOL_A_SETTINGS_LINK_MODES]		= { .type = NLA_NESTED },
 	[ETHTOOL_A_SETTINGS_LINK_STATE]		= { .type = NLA_REJECT },
 	[ETHTOOL_A_SETTINGS_WOL]		= { .type = NLA_NESTED },
+	[ETHTOOL_A_SETTINGS_DEBUG]		= { .type = NLA_REJECT },
 };
 
 static int ethnl_set_link_ksettings(struct genl_info *info,
-- 
2.22.0

