From b5cb12dd416b2456e0549d3f31c9185e75a0569e Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Mon, 11 Mar 2019 08:47:45 +0100
Subject: [PATCH 35/43] ethtool: set EEE settings with PARAMS_SET request

Add support for setting EEE settings using PARAMS_SET request with
ETHTOOL_A_PARAMS_EEE nested attribute. This is a replacement for
ETHTOOL_SEEE ioctl command.

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 Documentation/networking/ethtool-netlink.txt | 18 ++++--
 net/ethtool/params.c                         | 68 +++++++++++++++++++-
 2 files changed, 79 insertions(+), 7 deletions(-)

diff --git a/Documentation/networking/ethtool-netlink.txt b/Documentation/networking/ethtool-netlink.txt
index 5275805e9877..a5b5c5102892 100644
--- a/Documentation/networking/ethtool-netlink.txt
+++ b/Documentation/networking/ethtool-netlink.txt
@@ -520,11 +520,11 @@ PARAMS_SET
 ----------
 
 PARAMS_SET request modifies the settings retrieved by PARAMS_GET, i.e. it
-replaces ETHTOOL_SCOALESCE, ETHTOOL_SRINGPARAM, ETHTOOL_SPAUSEPARAM and
-ETHTOOL_SCHANNELS ioctl commands. For each of these, relevant data attributes
-are contained in a corresponding nest attribute. Some of the attributes
-provided by PARAMS_GET are read only and cannot be set by PARAMS_SET
-request.
+replaces ETHTOOL_SCOALESCE, ETHTOOL_SRINGPARAM, ETHTOOL_SPAUSEPARAM,
+ETHTOOL_SCHANNELS and ETHTOOL_SEEE ioctl commands. For each of these, relevant
+data attributes are contained in a corresponding nest attribute. Some of the
+attributes provided by PARAMS_GET are read only and cannot be set by
+PARAMS_SET request.
 
     ETHTOOL_A_PARAMS_HEADER		(nested)	request header
     ETHTOOL_A_PARAMS_COALESCE		(nested)	coalescing parameters
@@ -564,6 +564,12 @@ request.
         ETHTOOL_A_CHANNELS_TX_COUNT	    (u32)
         ETHTOOL_A_CHANNELS_OTHER_COUNT	    (u32)
         ETHTOOL_A_CHANNELS_COMBINED_COUN    (u32)
+    ETHTOOL_A_PARAMS_EEE		(nested)	EEE settings
+        ETHTOOL_A_EEE_LINK_MODES	    (bitset)
+		- change modes for which EEE is advertised
+        ETHTOOL_A_EEE_ENABLED		    (bool)
+        ETHTOOL_A_EEE_TX_LPI_ENABLED	    (bool)
+        ETHTOOL_A_EEE_TX_LPI_TIMER	    (u32)
 
 
 Request translation
@@ -642,7 +648,7 @@ ETHTOOL_GET_TS_INFO		ETHTOOL_MSG_INFO_GET
 ETHTOOL_GMODULEINFO		n/a
 ETHTOOL_GMODULEEEPROM		n/a
 ETHTOOL_GEEE			ETHTOOL_MSG_PARAMS_GET
-ETHTOOL_SEEE			n/a
+ETHTOOL_SEEE			ETHTOOL_MSG_PARAMS_SET
 ETHTOOL_GRSSH			n/a
 ETHTOOL_SRSSH			n/a
 ETHTOOL_GTUNABLE		n/a
diff --git a/net/ethtool/params.c b/net/ethtool/params.c
index 03d8339d3a49..732507cc34b5 100644
--- a/net/ethtool/params.c
+++ b/net/ethtool/params.c
@@ -430,7 +430,7 @@ static const struct nla_policy params_set_policy[ETHTOOL_A_PARAMS_MAX + 1] = {
 	[ETHTOOL_A_PARAMS_RING]			= { .type = NLA_NESTED },
 	[ETHTOOL_A_PARAMS_PAUSE]		= { .type = NLA_NESTED },
 	[ETHTOOL_A_PARAMS_CHANNELS]		= { .type = NLA_NESTED },
-	[ETHTOOL_A_PARAMS_EEE]			= { .type = NLA_REJECT },
+	[ETHTOOL_A_PARAMS_EEE]			= { .type = NLA_NESTED },
 };
 
 static const struct nla_policy params_hdr_policy[ETHTOOL_A_HEADER_MAX + 1] = {
@@ -772,6 +772,67 @@ static int params_update_channels(struct genl_info *info,
 	return (ret < 0) ? ret : 1;
 }
 
+static const struct nla_policy eee_policy[ETHTOOL_A_EEE_MAX + 1] = {
+	[ETHTOOL_A_EEE_UNSPEC]		= { .type = NLA_REJECT },
+	[ETHTOOL_A_EEE_LINK_MODES]	= { .type = NLA_NESTED },
+	[ETHTOOL_A_EEE_PEER_MODES]	= { .type = NLA_REJECT },
+	[ETHTOOL_A_EEE_ACTIVE]		= { .type = NLA_REJECT },
+	[ETHTOOL_A_EEE_ENABLED]		= { .type = NLA_U8 },
+	[ETHTOOL_A_EEE_TX_LPI_ENABLED]	= { .type = NLA_U8 },
+	[ETHTOOL_A_EEE_TX_LPI_TIMER]	= { .type = NLA_U32 },
+};
+
+/**
+ * params_update_eee() - update EEE parameters from nested attribute
+ * @info: genl_info pointer (only needed for extack)
+ * @dev:  device to set EEE parameters for
+ * @nest: ETHTOOL_A_PARAMS_EEE nested attribute
+ *
+ * Return: negative code on error, 0 if no change, >0 if there was a change
+ */
+static int params_update_eee(struct genl_info *info, struct net_device *dev,
+			     struct nlattr *nest)
+{
+	struct nlattr *tb[ETHTOOL_A_EEE_MAX + 1];
+	struct ethtool_eee data = {};
+	bool mod = false;
+	int ret;
+
+	if (!nest)
+		return 0;
+	if (!dev->ethtool_ops->get_eee ||
+	    !dev->ethtool_ops->set_eee)
+		return -EOPNOTSUPP;
+	ret = dev->ethtool_ops->get_eee(dev, &data);
+	if (ret < 0)
+		return ret;
+
+	ret = nla_parse_nested(tb, ETHTOOL_A_EEE_MAX, nest, eee_policy,
+			       info->extack);
+	if (ret < 0)
+		return ret;
+
+	if (ethnl_update_bitset32(&data.advertised, NULL, 32,
+				  tb[ETHTOOL_A_EEE_LINK_MODES], &ret,
+				  link_mode_names, false, info))
+		mod = true;
+	if (ret < 0)
+		return ret;
+	if (ethnl_update_bool32(&data.eee_enabled, tb[ETHTOOL_A_EEE_ENABLED]))
+		mod = true;
+	if (ethnl_update_bool32(&data.tx_lpi_enabled,
+				tb[ETHTOOL_A_EEE_TX_LPI_ENABLED]))
+		mod = true;
+	if (ethnl_update_u32(&data.tx_lpi_timer,
+			     tb[ETHTOOL_A_EEE_TX_LPI_TIMER]))
+		mod = true;
+
+	if (!mod)
+		return 0;
+	ret = dev->ethtool_ops->set_eee(dev, &data);
+	return (ret < 0) ? ret : 1;
+}
+
 int ethnl_set_params(struct sk_buff *skb, struct genl_info *info)
 {
 	struct nlattr *tb[ETHTOOL_A_PARAMS_MAX + 1];
@@ -815,6 +876,11 @@ int ethnl_set_params(struct sk_buff *skb, struct genl_info *info)
 		goto out_ops;
 	if (ret)
 		req_mask |= ETHTOOL_IM_PARAMS_CHANNELS;
+	ret = params_update_eee(info, dev, tb[ETHTOOL_A_PARAMS_EEE]);
+	if (ret < 0)
+		goto out_ops;
+	if (ret)
+		req_mask |= ETHTOOL_IM_PARAMS_EEE;
 
 	ret = 0;
 out_ops:
-- 
2.22.0

