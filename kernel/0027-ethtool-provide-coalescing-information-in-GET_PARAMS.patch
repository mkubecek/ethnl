From e4f04c23cd7992ddae5121c8202f30a409789f91 Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Sun, 10 Mar 2019 20:41:44 +0100
Subject: [PATCH 27/44] ethtool: provide coalescing information in GET_PARAMS
 request

Introduce GET_PARAMS netlink request to get coalescing information as
provided by ETHTOOL_GCOALESCE ioctl command if ETH_PARAMS_IM_COALESCE flag
is set in the request.

Send notification in the same format as the reqply message when coalescing
parameters are modified using the ioctl interface (ETHTOOL_SCOALESCE
command).

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 Documentation/networking/ethtool-netlink.txt |  53 +++++-
 include/uapi/linux/ethtool_netlink.h         |  48 +++++
 net/ethtool/Makefile                         |   2 +-
 net/ethtool/ioctl.c                          |   7 +-
 net/ethtool/netlink.c                        |   9 +
 net/ethtool/netlink.h                        |   1 +
 net/ethtool/params.c                         | 190 +++++++++++++++++++
 7 files changed, 307 insertions(+), 3 deletions(-)
 create mode 100644 net/ethtool/params.c

diff --git a/Documentation/networking/ethtool-netlink.txt b/Documentation/networking/ethtool-netlink.txt
index ec7675941a7b..5671b05b19bf 100644
--- a/Documentation/networking/ethtool-netlink.txt
+++ b/Documentation/networking/ethtool-netlink.txt
@@ -129,6 +129,8 @@ List of message types
     ETHNL_CMD_SET_INFO			response only
     ETHNL_CMD_GET_SETTINGS
     ETHNL_CMD_SET_SETTINGS
+    ETHNL_CMD_GET_PARAMS
+    ETHNL_CMD_SET_PARAMS		response only (for now)
 
 All constants use ETHNL_CMD_ prefix, usually followed by "GET", "SET" or "ACT"
 to indicate the type.
@@ -401,6 +403,55 @@ operation) and new (after the operation); mask shows bits which have been
 changed and value their new values.
 
 
+GET_PARAMS
+----------
+
+GET_PARAMS request retrieves information provided by ioctl comand
+ETHTOOL_GCOALESCE (coalescing parameters).
+
+Request contents:
+
+    ETHTOOL_A_PARAMS_DEV		(nested)	device identification
+    ETHTOOL_A_PARAMS_INFOMASK		(u32)		info mask
+    ETHTOOL_A_PARAMS_COMPACT		(flag)		request compact bitsets
+
+Info mask bits:
+
+    ETH_PARAMS_IM_COALESCE		coalescing parameters
+
+Response contents: On top level, there is one attribute for each of the
+information categories, the information is nested in it.
+
+    ETHTOOL_A_PARAMS_DEV		(nested)	device identification
+    ETHTOOL_A_PARAMS_COALESCE		(nested)	coalescing parameters
+        ETHTOOL_A_COALESCE_RX_USECS	    (u32)
+        ETHTOOL_A_COALESCE_RX_MAXFRM	    (u32)
+        ETHTOOL_A_COALESCE_RX_USECS_IRQ	    (u32)
+        ETHTOOL_A_COALESCE_RX_MAXFRM_IRQ    (u32)
+        ETHTOOL_A_COALESCE_RX_USECS_LOW	    (u32)
+        ETHTOOL_A_COALESCE_RX_MAXFRM_LOW    (u32)
+        ETHTOOL_A_COALESCE_RX_USECS_HIGH    (u32)
+        ETHTOOL_A_COALESCE_RX_MAXFRM_HIGH   (u32)
+        ETHTOOL_A_COALESCE_TX_USECS	    (u32)
+        ETHTOOL_A_COALESCE_TX_MAXFRM	    (u32)
+        ETHTOOL_A_COALESCE_TX_USECS_IRQ	    (u32)
+        ETHTOOL_A_COALESCE_TX_MAXFRM_IRQ    (u32)
+        ETHTOOL_A_COALESCE_TX_USECS_LOW	    (u32)
+        ETHTOOL_A_COALESCE_TX_MAXFRM_LOW    (u32)
+        ETHTOOL_A_COALESCE_TX_USECS_HIGH    (u32)
+        ETHTOOL_A_COALESCE_TX_MAXFRM_HIGH   (u32)
+        ETHTOOL_A_COALESCE_PKT_RATE_LOW	    (u32)
+        ETHTOOL_A_COALESCE_PKT_RATE_HIGH    (u32)
+        ETHTOOL_A_COALESCE_RX_USE_ADAPTIVE  (bool)
+        ETHTOOL_A_COALESCE_TX_USE_ADAPTIVE  (bool)
+        ETHTOOL_A_COALESCE_RATE_SAMPLE_INTERVAL	(u32)
+        ETHTOOL_A_COALESCE_STATS_BLOCK_USECS	(u32)
+
+GET_PARAMS requests allow dumps and messages in the same format as response
+to them are broadcasted as notifications on change of these settings using
+netlink or ioctl ethtool interface.
+
+
 Request translation
 -------------------
 
@@ -422,7 +473,7 @@ ETHTOOL_NWAY_RST		n/a
 ETHTOOL_GLINK			ETHNL_CMD_GET_SETTINGS
 ETHTOOL_GEEPROM			n/a
 ETHTOOL_SEEPROM			n/a
-ETHTOOL_GCOALESCE		n/a
+ETHTOOL_GCOALESCE		ETHNL_CMD_GET_PARAMS
 ETHTOOL_SCOALESCE		n/a
 ETHTOOL_GRINGPARAM		n/a
 ETHTOOL_SRINGPARAM		n/a
diff --git a/include/uapi/linux/ethtool_netlink.h b/include/uapi/linux/ethtool_netlink.h
index 16e338135f91..85ffb6364597 100644
--- a/include/uapi/linux/ethtool_netlink.h
+++ b/include/uapi/linux/ethtool_netlink.h
@@ -20,6 +20,8 @@ enum {
 	ETHNL_CMD_SET_INFO,		/* only for reply */
 	ETHNL_CMD_GET_SETTINGS,
 	ETHNL_CMD_SET_SETTINGS,
+	ETHNL_CMD_GET_PARAMS,
+	ETHNL_CMD_SET_PARAMS,
 
 	__ETHNL_CMD_CNT,
 	ETHNL_CMD_MAX = (__ETHNL_CMD_CNT - 1)
@@ -283,6 +285,52 @@ enum {
 	ETHTOOL_A_FEATURES_MAX = (__ETHTOOL_A_FEATURES_CNT - 1)
 };
 
+/* GET_PARAMS / SET_PARAMS */
+
+enum {
+	ETHTOOL_A_PARAMS_UNSPEC,
+	ETHTOOL_A_PARAMS_DEV,			/* nest - ETHTOOL_A_DEV_* */
+	ETHTOOL_A_PARAMS_INFOMASK,		/* u32 */
+	ETHTOOL_A_PARAMS_COMPACT,		/* flag */
+	ETHTOOL_A_PARAMS_COALESCE,		/* nest - ETHTOOL_A_COALESCE_* */
+
+	__ETHTOOL_A_PARAMS_CNT,
+	ETHTOOL_A_PARAMS_MAX = (__ETHTOOL_A_PARAMS_CNT - 1)
+};
+
+#define ETH_PARAMS_IM_COALESCE			(1U << 0)
+
+#define ETH_PARAMS_IM_ALL (ETH_PARAMS_IM_COALESCE)
+
+enum {
+	ETHTOOL_A_COALESCE_UNSPEC,
+	ETHTOOL_A_COALESCE_RX_USECS,		/* u32 */
+	ETHTOOL_A_COALESCE_RX_MAXFRM,		/* u32 */
+	ETHTOOL_A_COALESCE_RX_USECS_IRQ,	/* u32 */
+	ETHTOOL_A_COALESCE_RX_MAXFRM_IRQ,	/* u32 */
+	ETHTOOL_A_COALESCE_RX_USECS_LOW,	/* u32 */
+	ETHTOOL_A_COALESCE_RX_MAXFRM_LOW,	/* u32 */
+	ETHTOOL_A_COALESCE_RX_USECS_HIGH,	/* u32 */
+	ETHTOOL_A_COALESCE_RX_MAXFRM_HIGH,	/* u32 */
+	ETHTOOL_A_COALESCE_TX_USECS,		/* u32 */
+	ETHTOOL_A_COALESCE_TX_MAXFRM,		/* u32 */
+	ETHTOOL_A_COALESCE_TX_USECS_IRQ,	/* u32 */
+	ETHTOOL_A_COALESCE_TX_MAXFRM_IRQ,	/* u32 */
+	ETHTOOL_A_COALESCE_TX_USECS_LOW,	/* u32 */
+	ETHTOOL_A_COALESCE_TX_MAXFRM_LOW,	/* u32 */
+	ETHTOOL_A_COALESCE_TX_USECS_HIGH,	/* u32 */
+	ETHTOOL_A_COALESCE_TX_MAXFRM_HIGH,	/* u32 */
+	ETHTOOL_A_COALESCE_PKT_RATE_LOW,	/* u32 */
+	ETHTOOL_A_COALESCE_PKT_RATE_HIGH,	/* u32 */
+	ETHTOOL_A_COALESCE_RX_USE_ADAPTIVE,	/* u8 */
+	ETHTOOL_A_COALESCE_TX_USE_ADAPTIVE,	/* u8 */
+	ETHTOOL_A_COALESCE_RATE_SAMPLE_INTERVAL, /* u32 */
+	ETHTOOL_A_COALESCE_STATS_BLOCK_USECS,	/* u32 */
+
+	__ETHTOOL_A_COALESCE_CNT,
+	ETHTOOL_A_COALESCE_MAX = (__ETHTOOL_A_COALESCE_CNT - 1)
+};
+
 /* generic netlink info */
 #define ETHTOOL_GENL_NAME "ethtool"
 #define ETHTOOL_GENL_VERSION 1
diff --git a/net/ethtool/Makefile b/net/ethtool/Makefile
index 6a7a182e1568..95e93c153cf6 100644
--- a/net/ethtool/Makefile
+++ b/net/ethtool/Makefile
@@ -4,4 +4,4 @@ obj-y				+= ioctl.o common.o
 
 obj-$(CONFIG_ETHTOOL_NETLINK)	+= ethtool_nl.o
 
-ethtool_nl-y	:= netlink.o bitset.o strset.o info.o settings.o
+ethtool_nl-y	:= netlink.o bitset.o strset.o info.o settings.o params.o
diff --git a/net/ethtool/ioctl.c b/net/ethtool/ioctl.c
index e391652130d8..ee326a10991b 100644
--- a/net/ethtool/ioctl.c
+++ b/net/ethtool/ioctl.c
@@ -1459,6 +1459,7 @@ static noinline_for_stack int ethtool_set_coalesce(struct net_device *dev,
 						   void __user *useraddr)
 {
 	struct ethtool_coalesce coalesce;
+	int ret;
 
 	if (!dev->ethtool_ops->set_coalesce)
 		return -EOPNOTSUPP;
@@ -1466,7 +1467,11 @@ static noinline_for_stack int ethtool_set_coalesce(struct net_device *dev,
 	if (copy_from_user(&coalesce, useraddr, sizeof(coalesce)))
 		return -EFAULT;
 
-	return dev->ethtool_ops->set_coalesce(dev, &coalesce);
+	ret = dev->ethtool_ops->set_coalesce(dev, &coalesce);
+	if (ret >= 0)
+		ethtool_notify(dev, NULL, ETHNL_CMD_SET_PARAMS,
+			       ETH_PARAMS_IM_COALESCE, NULL);
+	return ret;
 }
 
 static int ethtool_get_ringparam(struct net_device *dev, void __user *useraddr)
diff --git a/net/ethtool/netlink.c b/net/ethtool/netlink.c
index bcc4cfc21f52..d237b8a5348a 100644
--- a/net/ethtool/netlink.c
+++ b/net/ethtool/netlink.c
@@ -258,6 +258,7 @@ const struct get_request_ops *get_requests[__ETHNL_CMD_CNT] = {
 	[ETHNL_CMD_GET_STRSET]		= &strset_request_ops,
 	[ETHNL_CMD_GET_INFO]		= &info_request_ops,
 	[ETHNL_CMD_GET_SETTINGS]	= &settings_request_ops,
+	[ETHNL_CMD_GET_PARAMS]		= &params_request_ops,
 };
 
 /**
@@ -581,6 +582,7 @@ typedef void (*ethnl_notify_handler_t)(struct net_device *dev,
 
 static const ethnl_notify_handler_t ethnl_notify_handlers[] = {
 	[ETHNL_CMD_SET_SETTINGS]	= ethnl_std_notify,
+	[ETHNL_CMD_SET_PARAMS]		= ethnl_std_notify,
 };
 
 void ethtool_notify(struct net_device *dev, struct netlink_ext_ack *extack,
@@ -700,6 +702,13 @@ static const struct genl_ops ethtool_genl_ops[] = {
 		.flags	= GENL_UNS_ADMIN_PERM,
 		.doit	= ethnl_set_settings,
 	},
+	{
+		.cmd	= ETHNL_CMD_GET_PARAMS,
+		.doit	= ethnl_get_doit,
+		.start	= ethnl_get_start,
+		.dumpit	= ethnl_get_dumpit,
+		.done	= ethnl_get_done,
+	},
 };
 
 static const struct genl_multicast_group ethtool_nl_mcgrps[] = {
diff --git a/net/ethtool/netlink.h b/net/ethtool/netlink.h
index ec224707bd40..ab508379c728 100644
--- a/net/ethtool/netlink.h
+++ b/net/ethtool/netlink.h
@@ -257,6 +257,7 @@ struct get_request_ops {
 extern const struct get_request_ops strset_request_ops;
 extern const struct get_request_ops info_request_ops;
 extern const struct get_request_ops settings_request_ops;
+extern const struct get_request_ops params_request_ops;
 
 int ethnl_set_settings(struct sk_buff *skb, struct genl_info *info);
 
diff --git a/net/ethtool/params.c b/net/ethtool/params.c
new file mode 100644
index 000000000000..f3ba6ffb678c
--- /dev/null
+++ b/net/ethtool/params.c
@@ -0,0 +1,190 @@
+/* SPDX-License-Identifier: GPL-2.0 WITH Linux-syscall-note */
+
+#include "netlink.h"
+
+static const struct nla_policy get_params_policy[ETHTOOL_A_PARAMS_MAX + 1] = {
+	[ETHTOOL_A_PARAMS_UNSPEC]		= { .type = NLA_REJECT },
+	[ETHTOOL_A_PARAMS_DEV]			= { .type = NLA_NESTED },
+	[ETHTOOL_A_PARAMS_INFOMASK]		= { .type = NLA_U32 },
+	[ETHTOOL_A_PARAMS_COMPACT]		= { .type = NLA_FLAG },
+	[ETHTOOL_A_PARAMS_COALESCE]		= { .type = NLA_REJECT },
+};
+
+struct params_data {
+	struct common_req_info		reqinfo_base;
+
+	/* everything below here will be reset for each device in dumps */
+	struct common_reply_data	repdata_base;
+	struct ethtool_coalesce		coalesce;
+};
+
+static int parse_params(struct common_req_info *req_info, struct sk_buff *skb,
+			struct genl_info *info, const struct nlmsghdr *nlhdr)
+{
+	struct nlattr *tb[ETHTOOL_A_PARAMS_MAX + 1];
+	int ret;
+
+	ret = nlmsg_parse(nlhdr, GENL_HDRLEN, tb, ETHTOOL_A_PARAMS_MAX,
+			  get_params_policy, info->extack);
+	if (ret < 0)
+		return ret;
+
+	if (tb[ETHTOOL_A_PARAMS_DEV]) {
+		req_info->dev = ethnl_dev_get(info, tb[ETHTOOL_A_PARAMS_DEV]);
+		if (IS_ERR(req_info->dev)) {
+			ret = PTR_ERR(req_info->dev);
+			req_info->dev = NULL;
+			return ret;
+		}
+	}
+	if (tb[ETHTOOL_A_PARAMS_INFOMASK])
+		req_info->req_mask = nla_get_u32(tb[ETHTOOL_A_PARAMS_INFOMASK]);
+	if (tb[ETHTOOL_A_PARAMS_COMPACT])
+		req_info->compact = true;
+	if (req_info->req_mask == 0)
+		req_info->req_mask = ETH_PARAMS_IM_ALL;
+
+	return 0;
+}
+
+static int ethnl_get_coalesce(struct net_device *dev,
+			      struct ethtool_coalesce *data)
+{
+	if (!dev->ethtool_ops->get_coalesce)
+		return -EOPNOTSUPP;
+	return dev->ethtool_ops->get_coalesce(dev, data);
+}
+
+static int prepare_params(struct common_req_info *req_info,
+			  struct genl_info *info)
+{
+	struct params_data *data =
+		container_of(req_info, struct params_data, reqinfo_base);
+	struct net_device *dev = data->repdata_base.dev;
+	u32 req_mask = req_info->req_mask;
+	int ret;
+
+	ret = ethnl_before_ops(dev);
+	if (ret < 0)
+		return ret;
+	if (req_mask & ETH_PARAMS_IM_COALESCE) {
+		ret = ethnl_get_coalesce(dev, &data->coalesce);
+		if (ret < 0)
+			req_mask &= ~ETH_PARAMS_IM_COALESCE;
+	}
+	ethnl_after_ops(dev);
+
+	data->repdata_base.info_mask = req_mask;
+	if (req_info->req_mask & ~req_mask)
+		warn_partial_info(info);
+	return 0;
+}
+
+static int coalesce_size(void)
+{
+	return nla_total_size(20 * nla_total_size(sizeof(u32)) +
+			      2 * nla_total_size(sizeof(u8)));
+}
+
+static int params_size(const struct common_req_info *req_info)
+{
+	struct params_data *data =
+		container_of(req_info, struct params_data, reqinfo_base);
+	u32 info_mask = data->repdata_base.info_mask;
+	int len = 0;
+
+	len += dev_ident_size();
+	if (info_mask & ETH_PARAMS_IM_COALESCE)
+		len += coalesce_size();
+
+	return len;
+}
+
+static int fill_coalesce(struct sk_buff *skb, struct ethtool_coalesce *data)
+{
+	struct nlattr *nest;
+
+	nest = nla_nest_start(skb, ETHTOOL_A_PARAMS_COALESCE);
+	if (!nest)
+		return -EMSGSIZE;
+	if (nla_put_u32(skb, ETHTOOL_A_COALESCE_RX_USECS,
+			data->rx_coalesce_usecs) ||
+	    nla_put_u32(skb, ETHTOOL_A_COALESCE_RX_MAXFRM,
+			data->rx_max_coalesced_frames) ||
+	    nla_put_u32(skb, ETHTOOL_A_COALESCE_RX_USECS_IRQ,
+			data->rx_coalesce_usecs_irq) ||
+	    nla_put_u32(skb, ETHTOOL_A_COALESCE_RX_MAXFRM_IRQ,
+			data->rx_max_coalesced_frames_irq) ||
+	    nla_put_u32(skb, ETHTOOL_A_COALESCE_RX_USECS_LOW,
+			data->rx_coalesce_usecs_low) ||
+	    nla_put_u32(skb, ETHTOOL_A_COALESCE_RX_MAXFRM_LOW,
+			data->rx_max_coalesced_frames_low) ||
+	    nla_put_u32(skb, ETHTOOL_A_COALESCE_RX_USECS_HIGH,
+			data->rx_coalesce_usecs_high) ||
+	    nla_put_u32(skb, ETHTOOL_A_COALESCE_RX_MAXFRM_HIGH,
+			data->rx_max_coalesced_frames_high) ||
+	    nla_put_u32(skb, ETHTOOL_A_COALESCE_TX_USECS,
+			data->tx_coalesce_usecs) ||
+	    nla_put_u32(skb, ETHTOOL_A_COALESCE_TX_MAXFRM,
+			data->tx_max_coalesced_frames) ||
+	    nla_put_u32(skb, ETHTOOL_A_COALESCE_TX_USECS_IRQ,
+			data->tx_coalesce_usecs_irq) ||
+	    nla_put_u32(skb, ETHTOOL_A_COALESCE_TX_MAXFRM_IRQ,
+			data->tx_max_coalesced_frames_irq) ||
+	    nla_put_u32(skb, ETHTOOL_A_COALESCE_TX_USECS_LOW,
+			data->tx_coalesce_usecs_low) ||
+	    nla_put_u32(skb, ETHTOOL_A_COALESCE_TX_MAXFRM_LOW,
+			data->tx_max_coalesced_frames_low) ||
+	    nla_put_u32(skb, ETHTOOL_A_COALESCE_TX_USECS_HIGH,
+			data->tx_coalesce_usecs_high) ||
+	    nla_put_u32(skb, ETHTOOL_A_COALESCE_TX_MAXFRM_HIGH,
+			data->tx_max_coalesced_frames_high) ||
+	    nla_put_u32(skb, ETHTOOL_A_COALESCE_PKT_RATE_LOW,
+			data->pkt_rate_low) ||
+	    nla_put_u32(skb, ETHTOOL_A_COALESCE_PKT_RATE_HIGH,
+			data->pkt_rate_high) ||
+	    nla_put_u8(skb, ETHTOOL_A_COALESCE_RX_USE_ADAPTIVE,
+		       !!data->use_adaptive_rx_coalesce) ||
+	    nla_put_u8(skb, ETHTOOL_A_COALESCE_TX_USE_ADAPTIVE,
+		       !!data->use_adaptive_tx_coalesce) ||
+	    nla_put_u32(skb, ETHTOOL_A_COALESCE_RATE_SAMPLE_INTERVAL,
+			data->rate_sample_interval) ||
+	    nla_put_u32(skb, ETHTOOL_A_COALESCE_STATS_BLOCK_USECS,
+			data->stats_block_coalesce_usecs)) {
+		nla_nest_cancel(skb, nest);
+		return -EMSGSIZE;
+	}
+
+	nla_nest_end(skb, nest);
+	return 0;
+}
+
+static int fill_params(struct sk_buff *skb,
+		       const struct common_req_info *req_info)
+{
+	struct params_data *data =
+		container_of(req_info, struct params_data, reqinfo_base);
+	u32 info_mask = data->repdata_base.info_mask;
+	int ret;
+
+	if (info_mask & ETH_PARAMS_IM_COALESCE) {
+		ret = fill_coalesce(skb, &data->coalesce);
+		if (ret < 0)
+			return ret;
+	}
+
+	return 0;
+}
+
+const struct get_request_ops params_request_ops = {
+	.request_cmd		= ETHNL_CMD_GET_PARAMS,
+	.reply_cmd		= ETHNL_CMD_SET_PARAMS,
+	.dev_attrtype		= ETHTOOL_A_PARAMS_DEV,
+	.data_size		= sizeof(struct params_data),
+	.repdata_offset		= offsetof(struct params_data, repdata_base),
+
+	.parse_request		= parse_params,
+	.prepare_data		= prepare_params,
+	.reply_size		= params_size,
+	.fill_reply		= fill_params,
+};
-- 
2.21.0

