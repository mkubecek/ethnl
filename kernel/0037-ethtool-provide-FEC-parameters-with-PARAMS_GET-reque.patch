From 4afbdc9a2ea9fff756bed1281d754b4e97f00a4f Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Mon, 11 Mar 2019 08:53:42 +0100
Subject: [PATCH 37/44] ethtool: provide FEC parameters with PARAMS_GET request

Add information about FEC settings (as provided by ETHTOOL_GFECPARAM ioctl
command) in PARAMS_GET reply when ETHTOOL_IM_PARAMS_FEC flag is set in the
request.

Send notification in the same format as reply when FEC parameters are
modified using the ioctl interface (ETHTOOL_SFECPARAM command).

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 Documentation/networking/ethtool-netlink.txt | 13 ++++--
 include/uapi/linux/ethtool_netlink.h         | 14 +++++-
 net/ethtool/ioctl.c                          |  7 ++-
 net/ethtool/params.c                         | 46 ++++++++++++++++++++
 4 files changed, 74 insertions(+), 6 deletions(-)

diff --git a/Documentation/networking/ethtool-netlink.txt b/Documentation/networking/ethtool-netlink.txt
index ea6529e77a2b..29e8731d1f9f 100644
--- a/Documentation/networking/ethtool-netlink.txt
+++ b/Documentation/networking/ethtool-netlink.txt
@@ -436,9 +436,10 @@ PARAMS_GET
 
 PARAMS_GET request retrieves information provided by ioctl comands
 ETHTOOL_GCOALESCE (coalescing parameters), ETHTOOL_GRINGPARAM (ring sizes),
-ETHTOOL_GPAUSEPARAM (pause parameters), ETHTOOL_GCHANNELS (channel counts) and
-ETHTOOL_GEEE (EEE settings). For each of these, there is a bit in header
-info_mask so that only one type of information can be requested.
+ETHTOOL_GPAUSEPARAM (pause parameters), ETHTOOL_GCHANNELS (channel counts),
+ETHTOOL_GEEE (EEE settings) and ETHTOOL_GFECPARAM (FEC parameters). For each of
+these, there is a bit in header info_mask so that only one type of information
+can be requested.
 
 Request contents:
 
@@ -451,6 +452,7 @@ Info mask bits:
     ETHTOOL_IM_PARAMS_PAUSE		pause parameters
     ETHTOOL_IM_PARAMS_CHANNELS		channel counts
     ETHTOOL_IM_PARAMS_EEE		EEE settings
+    ETHTOOL_IM_PARAMS_FEC		FEC parameters
 
 Response contents: On top level, there is one attribute for each of the
 information categories, the information is nested in it.
@@ -510,6 +512,9 @@ information categories, the information is nested in it.
         ETHTOOL_A_EEE_ENABLED		    (bool)
         ETHTOOL_A_EEE_TX_LPI_ENABLED	    (bool)
         ETHTOOL_A_EEE_TX_LPI_TIMER	    (u32)
+    ETHTOOL_A_PARAMS_FEC		(nested)	FEC parameters
+        ETHTOOL_A_FEC_MODES		    (bitfield32)
+		- active (value) and configured (selector) FEC encodings
 
 PARAMS_GET requests allow dumps and messages in the same format as response
 to them are broadcasted as notifications on change of these settings using
@@ -659,5 +664,5 @@ ETHTOOL_GLINKSETTINGS		ETHTOOL_MSG_SETTINGS_GET
 ETHTOOL_SLINKSETTINGS		ETHTOOL_MSG_SETTINGS_SET
 ETHTOOL_PHY_GTUNABLE		n/a
 ETHTOOL_PHY_STUNABLE		n/a
-ETHTOOL_GFECPARAM		n/a
+ETHTOOL_GFECPARAM		ETHTOOL_MSG_PARAMS_GET
 ETHTOOL_SFECPARAM		n/a
diff --git a/include/uapi/linux/ethtool_netlink.h b/include/uapi/linux/ethtool_netlink.h
index c815d6930e70..d9285fdfa82c 100644
--- a/include/uapi/linux/ethtool_netlink.h
+++ b/include/uapi/linux/ethtool_netlink.h
@@ -315,6 +315,7 @@ enum {
 	ETHTOOL_A_PARAMS_PAUSE,			/* nest - _A_PAUSE_* */
 	ETHTOOL_A_PARAMS_CHANNELS,		/* nest - _A_CHANNELS_* */
 	ETHTOOL_A_PARAMS_EEE,			/* nest - _A_EEE_* */
+	ETHTOOL_A_PARAMS_FEC,			/* nest - _A_FEC_* */
 
 	/* add new constants above here */
 	__ETHTOOL_A_PARAMS_CNT,
@@ -326,12 +327,14 @@ enum {
 #define ETHTOOL_IM_PARAMS_PAUSE			(1U << 2)
 #define ETHTOOL_IM_PARAMS_CHANNELS		(1U << 3)
 #define ETHTOOL_IM_PARAMS_EEE			(1U << 4)
+#define ETHTOOL_IM_PARAMS_FEC			(1U << 5)
 
 #define ETHTOOL_IM_PARAMS_ALL (ETHTOOL_IM_PARAMS_COALESCE | \
 			       ETHTOOL_IM_PARAMS_RING | \
 			       ETHTOOL_IM_PARAMS_PAUSE | \
 			       ETHTOOL_IM_PARAMS_CHANNELS | \
-			       ETHTOOL_IM_PARAMS_EEE)
+			       ETHTOOL_IM_PARAMS_EEE | \
+			       ETHTOOL_IM_PARAMS_FEC)
 
 #define ETHTOOL_RF_PARAMS_ALL 0
 
@@ -422,6 +425,15 @@ enum {
 	ETHTOOL_A_EEE_MAX = (__ETHTOOL_A_EEE_CNT - 1)
 };
 
+enum {
+	ETHTOOL_A_FEC_UNSPEC,
+	ETHTOOL_A_FEC_MODES,			/* bitfield32 */
+
+	/* add new constants above here */
+	__ETHTOOL_A_FEC_CNT,
+	ETHTOOL_A_FEC_MAX = (__ETHTOOL_A_FEC_CNT - 1)
+};
+
 /* generic netlink info */
 #define ETHTOOL_GENL_NAME "ethtool"
 #define ETHTOOL_GENL_VERSION 1
diff --git a/net/ethtool/ioctl.c b/net/ethtool/ioctl.c
index 9aa89e9e8988..d50cf13e4457 100644
--- a/net/ethtool/ioctl.c
+++ b/net/ethtool/ioctl.c
@@ -2338,6 +2338,7 @@ static int ethtool_get_fecparam(struct net_device *dev, void __user *useraddr)
 static int ethtool_set_fecparam(struct net_device *dev, void __user *useraddr)
 {
 	struct ethtool_fecparam fecparam;
+	int ret;
 
 	if (!dev->ethtool_ops->set_fecparam)
 		return -EOPNOTSUPP;
@@ -2345,7 +2346,11 @@ static int ethtool_set_fecparam(struct net_device *dev, void __user *useraddr)
 	if (copy_from_user(&fecparam, useraddr, sizeof(fecparam)))
 		return -EFAULT;
 
-	return dev->ethtool_ops->set_fecparam(dev, &fecparam);
+	ret = dev->ethtool_ops->set_fecparam(dev, &fecparam);
+	if (ret >= 0)
+		ethtool_notify(dev, NULL, ETHTOOL_MSG_PARAMS_NTF,
+			       ETHTOOL_IM_PARAMS_FEC, NULL);
+	return ret;
 }
 
 /* The main entry point in this file.  Called from net/core/dev_ioctl.c */
diff --git a/net/ethtool/params.c b/net/ethtool/params.c
index 732507cc34b5..9ceeb2b0202d 100644
--- a/net/ethtool/params.c
+++ b/net/ethtool/params.c
@@ -12,6 +12,7 @@ static const struct nla_policy params_get_policy[ETHTOOL_A_PARAMS_MAX + 1] = {
 	[ETHTOOL_A_PARAMS_PAUSE]		= { .type = NLA_REJECT },
 	[ETHTOOL_A_PARAMS_CHANNELS]		= { .type = NLA_REJECT },
 	[ETHTOOL_A_PARAMS_EEE]			= { .type = NLA_REJECT },
+	[ETHTOOL_A_PARAMS_FEC]			= { .type = NLA_REJECT },
 };
 
 struct params_data {
@@ -24,6 +25,7 @@ struct params_data {
 	struct ethtool_pauseparam	pause;
 	struct ethtool_channels		channels;
 	struct ethtool_eee		eee;
+	struct ethtool_fecparam		fec;
 };
 
 static int ethnl_get_coalesce(struct net_device *dev,
@@ -68,6 +70,13 @@ static int ethnl_get_eee(struct net_device *dev, struct ethtool_eee *data)
 	return dev->ethtool_ops->get_eee(dev, data);
 }
 
+static int ethnl_get_fec(struct net_device *dev, struct ethtool_fecparam *data)
+{
+	if (!dev->ethtool_ops->get_fecparam)
+		return -EOPNOTSUPP;
+	return dev->ethtool_ops->get_fecparam(dev, data);
+}
+
 static int params_prepare(struct ethnl_req_info *req_info,
 			  struct genl_info *info)
 {
@@ -105,6 +114,11 @@ static int params_prepare(struct ethnl_req_info *req_info,
 		if (ret < 0)
 			req_mask &= ~ETHTOOL_IM_PARAMS_EEE;
 	}
+	if (req_mask & ETHTOOL_IM_PARAMS_FEC) {
+		ret = ethnl_get_fec(dev, &data->fec);
+		if (ret < 0)
+			req_mask &= ~ETHTOOL_IM_PARAMS_FEC;
+	}
 	ethnl_after_ops(dev);
 
 	data->repdata_base.info_mask = req_mask;
@@ -164,6 +178,13 @@ static int params_eee_size(const struct ethtool_eee *eee, bool compact)
 	return nla_total_size(len);
 }
 
+static int params_fec_size(void)
+{
+	int len = nla_total_size(sizeof(struct nla_bitfield32));
+
+	return nla_total_size(len);
+}
+
 static int params_size(const struct ethnl_req_info *req_info)
 {
 	struct params_data *data =
@@ -188,6 +209,8 @@ static int params_size(const struct ethnl_req_info *req_info)
 			return ret;
 		len += ret;
 	}
+	if (info_mask & ETHTOOL_IM_PARAMS_FEC)
+		len += params_fec_size();
 
 	return len;
 }
@@ -367,6 +390,23 @@ static int params_fill_eee(struct sk_buff *skb, struct ethtool_eee *data,
 	return ret;
 }
 
+static int params_fill_fec(struct sk_buff *skb, struct ethtool_fecparam *data)
+{
+	struct nlattr *nest;
+
+	nest = nla_nest_start(skb, ETHTOOL_A_PARAMS_FEC);
+	if (!nest)
+		return -EMSGSIZE;
+	if (nla_put_bitfield32(skb, ETHTOOL_A_FEC_MODES, data->active_fec,
+			       data->fec)) {
+		nla_nest_cancel(skb, nest);
+		return -EMSGSIZE;
+	}
+
+	nla_nest_end(skb, nest);
+	return 0;
+}
+
 static int params_fill(struct sk_buff *skb,
 		       const struct ethnl_req_info *req_info)
 {
@@ -401,6 +441,11 @@ static int params_fill(struct sk_buff *skb,
 		if (ret < 0)
 			return ret;
 	}
+	if (info_mask & ETHTOOL_IM_PARAMS_FEC) {
+		ret = params_fill_fec(skb, &data->fec);
+		if (ret < 0)
+			return ret;
+	}
 
 	return 0;
 }
@@ -431,6 +476,7 @@ static const struct nla_policy params_set_policy[ETHTOOL_A_PARAMS_MAX + 1] = {
 	[ETHTOOL_A_PARAMS_PAUSE]		= { .type = NLA_NESTED },
 	[ETHTOOL_A_PARAMS_CHANNELS]		= { .type = NLA_NESTED },
 	[ETHTOOL_A_PARAMS_EEE]			= { .type = NLA_NESTED },
+	[ETHTOOL_A_PARAMS_FEC]			= { .type = NLA_REJECT },
 };
 
 static const struct nla_policy params_hdr_policy[ETHTOOL_A_HEADER_MAX + 1] = {
-- 
2.22.0

