From 92d26d49e9c8a0ac7d7f97a5039c35fce0d08300 Mon Sep 17 00:00:00 2001
From: Michal Kubecek <mkubecek@suse.cz>
Date: Mon, 11 Mar 2019 07:40:58 +0100
Subject: [PATCH 29/44] ethtool: provide ring sizes in GET_PARAMS request

Add information about ring sizes (as provided by ETHTOOL_GRINGPARAM ioctl
command) in GET_PARAMS reply when ETH_PARAMS_IM_RING flag is set in the
request.

Send notification in the same format as reply when ring sizes are modified
using ioctl interface (ETHTOOL_SRINGPARAM command).

Signed-off-by: Michal Kubecek <mkubecek@suse.cz>
---
 Documentation/networking/ethtool-netlink.txt | 18 +++++-
 include/uapi/linux/ethtool_netlink.h         | 20 ++++++-
 net/ethtool/ioctl.c                          |  7 ++-
 net/ethtool/params.c                         | 59 ++++++++++++++++++++
 4 files changed, 99 insertions(+), 5 deletions(-)

diff --git a/Documentation/networking/ethtool-netlink.txt b/Documentation/networking/ethtool-netlink.txt
index 2677b5db2ca5..ad45028e940a 100644
--- a/Documentation/networking/ethtool-netlink.txt
+++ b/Documentation/networking/ethtool-netlink.txt
@@ -406,8 +406,10 @@ changed and value their new values.
 GET_PARAMS
 ----------
 
-GET_PARAMS request retrieves information provided by ioctl comand
-ETHTOOL_GCOALESCE (coalescing parameters).
+GET_PARAMS request retrieves information provided by ioctl comands
+ETHTOOL_GCOALESCE (coalescing parameters) and ETHTOOL_GRINGPARAM (ring sizes).
+For each of these, there is a bit in header info_mask so that only one type of
+information can be requested.
 
 Request contents:
 
@@ -418,6 +420,7 @@ Request contents:
 Info mask bits:
 
     ETH_PARAMS_IM_COALESCE		coalescing parameters
+    ETH_PARAMS_IM_RING			ring sizes
 
 Response contents: On top level, there is one attribute for each of the
 information categories, the information is nested in it.
@@ -446,6 +449,15 @@ information categories, the information is nested in it.
         ETHTOOL_A_COALESCE_TX_USE_ADAPTIVE  (bool)
         ETHTOOL_A_COALESCE_RATE_SAMPLE_INTERVAL	(u32)
         ETHTOOL_A_COALESCE_STATS_BLOCK_USECS	(u32)
+    ETHTOOL_A_PARAMS_RING		(nested)	ring sizes
+        ETHTOOL_A_RING_RX_MAX_PENDING	    (u32)
+        ETHTOOL_A_RING_RX_MINI_MAX_PENDING  (u32)
+        ETHTOOL_A_RING_RX_JUMBO_MAX_PENDING (u32)
+        ETHTOOL_A_RING_TX_MAX_PENDING	    (u32)
+        ETHTOOL_A_RING_RX_PENDING	    (u32)
+        ETHTOOL_A_RING_RX_MINI_PENDING	    (u32)
+        ETHTOOL_A_RING_RX_JUMBO_PENDING	    (u32)
+        ETHTOOL_A_RING_TX_PENDING	    (u32)
 
 GET_PARAMS requests allow dumps and messages in the same format as response
 to them are broadcasted as notifications on change of these settings using
@@ -507,7 +519,7 @@ ETHTOOL_GEEPROM			n/a
 ETHTOOL_SEEPROM			n/a
 ETHTOOL_GCOALESCE		ETHNL_CMD_GET_PARAMS
 ETHTOOL_SCOALESCE		ETHNL_CMD_SET_PARAMS
-ETHTOOL_GRINGPARAM		n/a
+ETHTOOL_GRINGPARAM		ETHNL_CMD_GET_PARAMS
 ETHTOOL_SRINGPARAM		n/a
 ETHTOOL_GPAUSEPARAM		n/a
 ETHTOOL_SPAUSEPARAM		n/a
diff --git a/include/uapi/linux/ethtool_netlink.h b/include/uapi/linux/ethtool_netlink.h
index 85ffb6364597..4c01b25cde88 100644
--- a/include/uapi/linux/ethtool_netlink.h
+++ b/include/uapi/linux/ethtool_netlink.h
@@ -293,14 +293,17 @@ enum {
 	ETHTOOL_A_PARAMS_INFOMASK,		/* u32 */
 	ETHTOOL_A_PARAMS_COMPACT,		/* flag */
 	ETHTOOL_A_PARAMS_COALESCE,		/* nest - ETHTOOL_A_COALESCE_* */
+	ETHTOOL_A_PARAMS_RING,			/* nest - ETHTOOL_A_RING_* */
 
 	__ETHTOOL_A_PARAMS_CNT,
 	ETHTOOL_A_PARAMS_MAX = (__ETHTOOL_A_PARAMS_CNT - 1)
 };
 
 #define ETH_PARAMS_IM_COALESCE			(1U << 0)
+#define ETH_PARAMS_IM_RING			(1U << 1)
 
-#define ETH_PARAMS_IM_ALL (ETH_PARAMS_IM_COALESCE)
+#define ETH_PARAMS_IM_ALL (ETH_PARAMS_IM_COALESCE | \
+			   ETH_PARAMS_IM_RING)
 
 enum {
 	ETHTOOL_A_COALESCE_UNSPEC,
@@ -331,6 +334,21 @@ enum {
 	ETHTOOL_A_COALESCE_MAX = (__ETHTOOL_A_COALESCE_CNT - 1)
 };
 
+enum {
+	ETHTOOL_A_RING_UNSPEC,
+	ETHTOOL_A_RING_RX_MAX_PENDING,		/* u32 */
+	ETHTOOL_A_RING_RX_MINI_MAX_PENDING,	/* u32 */
+	ETHTOOL_A_RING_RX_JUMBO_MAX_PENDING,	/* u32 */
+	ETHTOOL_A_RING_TX_MAX_PENDING,		/* u32 */
+	ETHTOOL_A_RING_RX_PENDING,		/* u32 */
+	ETHTOOL_A_RING_RX_MINI_PENDING,		/* u32 */
+	ETHTOOL_A_RING_RX_JUMBO_PENDING,	/* u32 */
+	ETHTOOL_A_RING_TX_PENDING,		/* u32 */
+
+	__ETHTOOL_A_RING_CNT,
+	ETHTOOL_A_RING_MAX = (__ETHTOOL_A_RING_CNT - 1)
+};
+
 /* generic netlink info */
 #define ETHTOOL_GENL_NAME "ethtool"
 #define ETHTOOL_GENL_VERSION 1
diff --git a/net/ethtool/ioctl.c b/net/ethtool/ioctl.c
index ee326a10991b..0775f5810b9e 100644
--- a/net/ethtool/ioctl.c
+++ b/net/ethtool/ioctl.c
@@ -1491,6 +1491,7 @@ static int ethtool_get_ringparam(struct net_device *dev, void __user *useraddr)
 static int ethtool_set_ringparam(struct net_device *dev, void __user *useraddr)
 {
 	struct ethtool_ringparam ringparam, max = { .cmd = ETHTOOL_GRINGPARAM };
+	int ret;
 
 	if (!dev->ethtool_ops->set_ringparam || !dev->ethtool_ops->get_ringparam)
 		return -EOPNOTSUPP;
@@ -1507,7 +1508,11 @@ static int ethtool_set_ringparam(struct net_device *dev, void __user *useraddr)
 	    ringparam.tx_pending > max.tx_max_pending)
 		return -EINVAL;
 
-	return dev->ethtool_ops->set_ringparam(dev, &ringparam);
+	ret = dev->ethtool_ops->set_ringparam(dev, &ringparam);
+	if (ret >= 0)
+		ethtool_notify(dev, NULL, ETHNL_CMD_SET_PARAMS,
+			       ETH_PARAMS_IM_RING, NULL);
+	return ret;
 }
 
 static noinline_for_stack int ethtool_get_channels(struct net_device *dev,
diff --git a/net/ethtool/params.c b/net/ethtool/params.c
index 3d4fd562dc87..ee8eb6fb42b9 100644
--- a/net/ethtool/params.c
+++ b/net/ethtool/params.c
@@ -8,6 +8,7 @@ static const struct nla_policy get_params_policy[ETHTOOL_A_PARAMS_MAX + 1] = {
 	[ETHTOOL_A_PARAMS_INFOMASK]		= { .type = NLA_U32 },
 	[ETHTOOL_A_PARAMS_COMPACT]		= { .type = NLA_FLAG },
 	[ETHTOOL_A_PARAMS_COALESCE]		= { .type = NLA_REJECT },
+	[ETHTOOL_A_PARAMS_RING]			= { .type = NLA_REJECT },
 };
 
 struct params_data {
@@ -16,6 +17,7 @@ struct params_data {
 	/* everything below here will be reset for each device in dumps */
 	struct common_reply_data	repdata_base;
 	struct ethtool_coalesce		coalesce;
+	struct ethtool_ringparam	ring;
 };
 
 static int parse_params(struct common_req_info *req_info, struct sk_buff *skb,
@@ -55,6 +57,15 @@ static int ethnl_get_coalesce(struct net_device *dev,
 	return dev->ethtool_ops->get_coalesce(dev, data);
 }
 
+static int ethnl_get_ring(struct net_device *dev,
+			  struct ethtool_ringparam *data)
+{
+	if (!dev->ethtool_ops->get_ringparam)
+		return -EOPNOTSUPP;
+	dev->ethtool_ops->get_ringparam(dev, data);
+	return 0;
+}
+
 static int prepare_params(struct common_req_info *req_info,
 			  struct genl_info *info)
 {
@@ -72,6 +83,11 @@ static int prepare_params(struct common_req_info *req_info,
 		if (ret < 0)
 			req_mask &= ~ETH_PARAMS_IM_COALESCE;
 	}
+	if (req_mask & ETH_PARAMS_IM_RING) {
+		ret = ethnl_get_ring(dev, &data->ring);
+		if (ret < 0)
+			req_mask &= ~ETH_PARAMS_IM_RING;
+	}
 	ethnl_after_ops(dev);
 
 	data->repdata_base.info_mask = req_mask;
@@ -86,6 +102,11 @@ static int coalesce_size(void)
 			      2 * nla_total_size(sizeof(u8)));
 }
 
+static int ring_size(void)
+{
+	return nla_total_size(8 * nla_total_size(sizeof(u32)));
+}
+
 static int params_size(const struct common_req_info *req_info)
 {
 	struct params_data *data =
@@ -96,6 +117,8 @@ static int params_size(const struct common_req_info *req_info)
 	len += dev_ident_size();
 	if (info_mask & ETH_PARAMS_IM_COALESCE)
 		len += coalesce_size();
+	if (info_mask & ETH_PARAMS_IM_RING)
+		len += ring_size();
 
 	return len;
 }
@@ -158,6 +181,36 @@ static int fill_coalesce(struct sk_buff *skb, struct ethtool_coalesce *data)
 	return 0;
 }
 
+static int fill_ring(struct sk_buff *skb, struct ethtool_ringparam *data)
+{
+	struct nlattr *nest = ethnl_nest_start(skb, ETHTOOL_A_PARAMS_RING);
+
+	if (!nest)
+		return -EMSGSIZE;
+	if (nla_put_u32(skb, ETHTOOL_A_RING_RX_MAX_PENDING,
+			data->rx_max_pending) ||
+	    nla_put_u32(skb, ETHTOOL_A_RING_RX_MINI_MAX_PENDING,
+			data->rx_mini_max_pending) ||
+	    nla_put_u32(skb, ETHTOOL_A_RING_RX_JUMBO_MAX_PENDING,
+			data->rx_jumbo_max_pending) ||
+	    nla_put_u32(skb, ETHTOOL_A_RING_TX_MAX_PENDING,
+			data->tx_max_pending) ||
+	    nla_put_u32(skb, ETHTOOL_A_RING_RX_PENDING,
+			data->rx_pending) ||
+	    nla_put_u32(skb, ETHTOOL_A_RING_RX_MINI_PENDING,
+			data->rx_mini_pending) ||
+	    nla_put_u32(skb, ETHTOOL_A_RING_RX_JUMBO_PENDING,
+			data->rx_jumbo_pending) ||
+	    nla_put_u32(skb, ETHTOOL_A_RING_TX_PENDING,
+			data->tx_pending)) {
+		nla_nest_cancel(skb, nest);
+		return -EMSGSIZE;
+	}
+
+	nla_nest_end(skb, nest);
+	return 0;
+}
+
 static int fill_params(struct sk_buff *skb,
 		       const struct common_req_info *req_info)
 {
@@ -171,6 +224,11 @@ static int fill_params(struct sk_buff *skb,
 		if (ret < 0)
 			return ret;
 	}
+	if (info_mask & ETH_PARAMS_IM_RING) {
+		ret = fill_ring(skb, &data->ring);
+		if (ret < 0)
+			return ret;
+	}
 
 	return 0;
 }
@@ -196,6 +254,7 @@ static const struct nla_policy set_params_policy[ETHTOOL_A_PARAMS_MAX + 1] = {
 	[ETHTOOL_A_PARAMS_INFOMASK]		= { .type = NLA_REJECT },
 	[ETHTOOL_A_PARAMS_COMPACT]		= { .type = NLA_FLAG },
 	[ETHTOOL_A_PARAMS_COALESCE]		= { .type = NLA_NESTED },
+	[ETHTOOL_A_PARAMS_RING]			= { .type = NLA_REJECT },
 };
 
 static const struct nla_policy coalesce_policy[ETHTOOL_A_COALESCE_MAX + 1] = {
-- 
2.21.0

